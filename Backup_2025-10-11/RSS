{
  "createdAt": "2025-09-01T18:18:36.836Z",
  "updatedAt": "2025-09-19T22:45:36.000Z",
  "id": "vbkh4X46EnL7bgNf",
  "name": "RSS",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 60
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "ebb60901-fe3c-41da-ad8a-4de682faca9c",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "https://rss.torrentleech.org/f30e42b6acd7431578ce",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        208,
        0
      ],
      "id": "5966cc7d-c1db-4b18-87ca-a0f2ba0175a6",
      "name": "RSS Read"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"id\": \"=https://www.torrentleech.org/torrent/241592991\",\n  \"title\": \"=MLB 2025 08 31 Seattle Mariners vs Cleveland Guardians 1080p WEB h264-NiGHTNiNJAS\",\n  \"link\": \"=https://www.torrentleech.org/rss/download/241592991/f30e42b6acd7431578ce/MLB.2025.08.31.Seattle.Mariners.vs.Cleveland.Guardians.1080p.WEB.h264-NiGHTNiNJAS.torrent\",\n  \"pubDate\": \"=2025-09-01T18:14:58.000Z\",\n  \"categories\": \"=Episodes HD\",\n  \"description\": \"=Category: Episodes HD - Seeders: 0 - Leechers: 5\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        416,
        0
      ],
      "id": "8317b28e-f2a8-4496-b765-252fc2537228",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// ---- Inställningar ----\nconst MAX_HOURS = 24;                // släpp bara inlägg senaste 24h\nconst ALLOW_CATS = [\"WEBRip\",\"HDRip\"];               // t.ex. [\"WEBRip\",\"HDRip\"]; tom = tillåt alla\nconst BLOCK_CATS = [];               // t.ex. [\"CAM\"]; tom = blocka inga\n// ------------------------\n\nfunction withinHours(dateStr, hours) {\n  const d = new Date(dateStr || 0);\n  if (isNaN(d)) return false;\n  const diffMs = Date.now() - d.getTime();\n  return diffMs <= hours * 3600 * 1000;\n}\n\nfunction normalizeCats(cats) {\n  if (Array.isArray(cats)) return cats;\n  if (cats === null || cats === undefined) return [];\n  if (typeof cats === 'string') return [cats];\n  return [];\n}\n\nfunction hasAllowedCategory(cats) {\n  if (!ALLOW_CATS.length) return true;\n  const set = new Set(cats.map(c => String(c).toLowerCase()));\n  return ALLOW_CATS.some(c => set.has(c.toLowerCase()));\n}\n\nfunction hasBlockedCategory(cats) {\n  if (!BLOCK_CATS.length) return false;\n  const set = new Set(cats.map(c => String(c).toLowerCase()));\n  return BLOCK_CATS.some(c => set.has(c.toLowerCase()));\n}\n\nreturn items.filter(it => {\n  const dOk = withinHours(it.json.pubDate, MAX_HOURS);\n  const cats = normalizeCats(it.json.categories);\n  const cOk = hasAllowedCategory(cats) && !hasBlockedCategory(cats);\n  return dOk && cOk;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        0
      ],
      "id": "d7255130-0268-413e-a598-069c4c53cf67",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Persistens mellan körningar (liten key/value-låda i själva workflow:et)\nconst store = $getWorkflowStaticData('global');\nif (!store.sent) store.sent = {}; // { [id]: timestamp }\n\nconst fresh = [];\nfor (const it of items) {\n  const key = String(it.json.id || it.json.link || (it.json.title + '|' + it.json.pubDate) || '');\n  if (!key) continue;\n  if (!store.sent[key]) {\n    fresh.push(it);\n  }\n}\n\n// Returnera endast NYA poster\nreturn fresh;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        0
      ],
      "id": "996f614b-166e-488f-ba7d-d2c391351df2",
      "name": "key/value"
    },
    {
      "parameters": {
        "jsCode": "function esc(s = '') {\n  return String(s)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n}\n\n// Om inga nya poster, returnera bara ett \"inga nya\"\nif (items.length === 0) {\n  return [{\n    json: {\n      html: '<p><em>Inga nya poster.</em></p>',\n      text: 'Inga nya poster.',\n      count: 0\n    }\n  }];\n}\n\n// Bygg HTML-tabell\nlet rows = items.map(it => {\n  const title = esc(it.json.title || '');\n  const date = esc(it.json.pubDate || '');\n  const cats = it.json.categories;\n  const catsArr = Array.isArray(cats) ? cats : (cats ? [cats] : []);\n  const catsStr = esc(catsArr.join(', '));\n  return `<tr><td>${title}</td><td>${catsStr}</td><td>${date}</td></tr>`;\n}).join('');\n\nconst html = `\n<h3>Senaste från RSS</h3>\n<table border=\"1\" cellpadding=\"6\" cellspacing=\"0\" style=\"border-collapse:collapse;\">\n  <thead><tr><th>Titel</th><th>Kategori</th><th>Datum</th></tr></thead>\n  <tbody>${rows}</tbody>\n</table>\n`;\n\n// Bygg textlista\nconst text = items.map((it, i) => {\n  const cats = it.json.categories;\n  const catsArr = Array.isArray(cats) ? cats : (cats ? [cats] : []);\n  return `${i + 1}. ${it.json.title || ''}  [${catsArr.join(', ')}]  ${it.json.pubDate || ''}`;\n}).join('\\n');\n\nreturn [{\n  json: {\n    html,\n    text,\n    count: items.length\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        0
      ],
      "id": "954761dd-2743-4254-bd2f-e5a89608db6f",
      "name": "HTML & text"
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "key/value",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "key/value": {
      "main": [
        [
          {
            "node": "HTML & text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML & text": {
      "main": [
        []
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "c9494b7c-5014-4941-ab85-26499f3da5d2",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-01T18:18:36.873Z",
      "updatedAt": "2025-09-01T18:18:36.873Z",
      "role": "workflow:owner",
      "workflowId": "vbkh4X46EnL7bgNf",
      "projectId": "ZOaOlv2Mz7C5Yg5V"
    }
  ],
  "tags": []
}