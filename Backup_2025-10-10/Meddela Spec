{
  "createdAt": "2025-08-28T16:15:13.975Z",
  "updatedAt": "2025-08-29T18:15:02.000Z",
  "id": "FfSYuVZpRDUDBZBp",
  "name": "Meddela Spec",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 2.1,
      "position": [
        -288,
        16
      ],
      "id": "b22986e3-43ba-47af-a7f4-6398a645c470",
      "name": "Email Trigger (IMAP)",
      "credentials": {
        "imap": {
          "id": "VAWoBpV0uW4Dh3AX",
          "name": "IMAP account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "967e2b50-efea-48a7-b796-c946edf54708",
              "leftValue": "={{$json[\"from\"]}}",
              "rightValue": "conzpiro@gmail.com",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "df6a1084-d54f-4c09-b18b-4710bc7196c7",
              "leftValue": "={{$json[\"from\"]}}",
              "rightValue": "dan@tldrnewsletter.com",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "70ac75bd-b9cd-4be4-94c3-07637bf77725",
              "leftValue": "={{$json[\"from\"]}}",
              "rightValue": "joel.lundgren@osteraker.se",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -80,
        16
      ],
      "id": "2a32364e-b742-4a65-bc1e-a20d4e2d05ee",
      "name": "If"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// === Build Single Message with encoding fix (HTML) ===\n// MODE: Run once for each item\nconst MAX = 3500;\n\nfunction esc(s){\n  return String(s ?? '')\n    .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\n}\nfunction stripHtml(s){\n  return String(s ?? '')\n    .replace(/<style[\\s\\S]*?<\\/style>/gi,' ')\n    .replace(/<script[\\s\\S]*?<\\/script>/gi,' ')\n    .replace(/<[^>]+>/g,' ')\n    .replace(/&nbsp;/gi,' ')\n    .replace(/\\s+/g,' ')\n    .trim();\n}\nfunction fixEncoding(s){\n  if (!s) return s;\n  const looksBroken = /√É|√Ç|√¢‚Ç¨|√¢‚Ç¨‚Äú|√¢‚Ç¨‚Äù/.test(s);\n  if (!looksBroken) return s;\n  try { return Buffer.from(s, 'latin1').toString('utf8'); }\n  catch(e){ try { return decodeURIComponent(escape(s)); } catch(_){ return s; } }\n}\nfunction pick(...arr){ for (const v of arr) if (typeof v==='string' && v.trim()) return v; return ''; }\n\nconst from    = pick($json.from, $json.sender, 'ok√§nd avs√§ndare');\nconst subject = pick($json.subject, '(utan √§mne)');\n\nlet plain = pick($json.text, $json.textPlain, $json.plainText, $json.body, $json.message, $json.snippet);\nlet html  = pick($json.html, $json.textHtml, $json.bodyHtml);\n\nplain = fixEncoding(plain);\nhtml  = fixEncoding(html);\n\nlet body = (plain && plain.trim()) ? plain.trim() : stripHtml(html);\nif (!body) body = '(inget br√∂dtextinneh√•ll hittades i mailet)';\n\nlet full =\n  `üìß <b>Nytt mail fr√•n godk√§nd avs√§ndare</b>\\n` +\n  `<b>Fr√•n:</b> ${esc(from)}\\n` +\n  `<b>√Ñmne:</b> ${esc(subject)}\\n\\n` +\n  esc(body);\n\nif (full.length > MAX) full = full.slice(0, MAX - 1) + '‚Ä¶';\n\nreturn { json: { message: full } };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        128,
        -80
      ],
      "id": "deb33322-b552-44af-8879-86587840f405",
      "name": "Code"
    },
    {
      "parameters": {
        "chatId": "8452676547",
        "text": "={{$json[\"message\"]}}\n",
        "additionalFields": {
          "disable_web_page_preview": true,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        336,
        -80
      ],
      "id": "a747cb32-4ebc-4ddb-aa81-97e306f500f1",
      "name": "Send a text message",
      "webhookId": "49c688c1-80ba-494d-a60f-a7c8292ee533",
      "credentials": {
        "telegramApi": {
          "id": "7NKBIMQRWzjXDg0e",
          "name": "Telegram account"
        }
      }
    }
  ],
  "connections": {
    "Email Trigger (IMAP)": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Email Trigger (IMAP)": {
      "lastMessageUid": 55436
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "5dccb68e-f76e-46d8-ac2c-14ff02af42d1",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-28T16:15:13.990Z",
      "updatedAt": "2025-08-28T16:15:13.990Z",
      "role": "workflow:owner",
      "workflowId": "FfSYuVZpRDUDBZBp",
      "projectId": "ZOaOlv2Mz7C5Yg5V"
    }
  ],
  "tags": []
}