{
  "createdAt": "2025-10-09T20:19:49.424Z",
  "updatedAt": "2025-10-10T10:49:00.000Z",
  "id": "WGZmNNtndQU4JMfW",
  "name": "BackupWorkflows",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "filters": {
          "activeWorkflows": false
        },
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        -304,
        -128
      ],
      "id": "db4583a9-ae76-4469-93c0-1ce4a7a09a1c",
      "name": "Get many workflows",
      "credentials": {
        "n8nApi": {
          "id": "jwNRIVd8ZIakxVcy",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b153c45d-4498-479a-8a92-ea443810a9b9",
              "name": "folderName",
              "value": "=Backup_{{ $now.format('yyyy-MM-dd')}}",
              "type": "string"
            },
            {
              "id": "85e2daf5-7c4a-4bd3-b89a-0410f3ce9f96",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -496,
        -128
      ],
      "id": "d3ca148f-6eac-444a-ad4d-7e186cd5b9b1",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -96,
        -144
      ],
      "id": "98f7ee15-2503-4477-878d-4ea4b70c531f",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "45539e5c-8878-42d8-9ded-2505d809d0c3",
              "name": "nodes",
              "value": "={{ JSON.stringify($json, null, 2) }}",
              "type": "string"
            },
            {
              "id": "742fe8b6-bbff-4731-a813-233ca6c8b500",
              "name": "fileName",
              "value": "={{ $json.name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        144,
        -144
      ],
      "id": "ad155d39-a849-4354-9abc-16f8130f813a",
      "name": "Preper File Content"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "nodes",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        352,
        -144
      ],
      "id": "6207ca3b-e238-4728-bcde-e7fb1527ebd0",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "conzpiro",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n-backup",
          "mode": "list",
          "cachedResultName": "n8n-backup",
          "cachedResultUrl": "https://github.com/conzpiro/n8n-backup"
        },
        "filePath": "={{ $('Edit Fields').item.json.folderName }}/{{ $('Preper File Content').item.json.fileName }}",
        "binaryData": true,
        "commitMessage": "={{ $now.setZone('Europe/Stockholm').format('yyyy-MM-dd T') }} Backup completed\n"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        576,
        -144
      ],
      "id": "20830b96-ef2e-4a2a-b608-92a72b76b512",
      "name": "Create a file",
      "webhookId": "55188c2d-d3b6-417d-9045-9b6faa43e38f",
      "credentials": {
        "githubApi": {
          "id": "DjGHIKRB41bTLLdD",
          "name": "GitHub account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1p2_9YZGN6t0mLKnzNZ6clkVTGWqAUmq9R7qzr4tWg_k",
          "mode": "list",
          "cachedResultName": "Daily Backup n8n",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1p2_9YZGN6t0mLKnzNZ6clkVTGWqAUmq9R7qzr4tWg_k/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Blad1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1p2_9YZGN6t0mLKnzNZ6clkVTGWqAUmq9R7qzr4tWg_k/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "DateTime": "={{ $now.setZone('Europe/Stockholm').format('yyyy-MM-dd T') }}",
            "Folder Name": "={{ $('Edit Fields').item.json.folderName }}",
            "File Name": "={{ $('Preper File Content').item.json.fileName }}",
            "Error Message": "={{ $json.error }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "DateTime",
              "displayName": "DateTime",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Folder Name",
              "displayName": "Folder Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "File Name",
              "displayName": "File Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Error Message",
              "displayName": "Error Message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        800,
        -48
      ],
      "id": "08cfd05d-7cc6-4c68-b8ee-3ed8faa06b7b",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "mfSpR9qn5T9hu3Km",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "conzpiro",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n-backup",
          "mode": "list",
          "cachedResultName": "n8n-backup",
          "cachedResultUrl": "https://github.com/conzpiro/n8n-backup"
        },
        "filePath": "={{ $('Edit Fields').item.json.folderName }}/README.md",
        "fileContent": "=# N8N Workflow Backup – {{ $('Edit Fields').item.json.folderName }}\n\nThis folder contains the backup of all N8N workflows as of {{ $now.setZone('Europe/Stockholm').format('yyyy-MM-dd') }}\n\n## Backup Details\n- Backup Time: {{ $now.setZone('Europe/Stockholm').format('yyyy-MM-dd T') }}\n- Total Workflows: {{ $('Get many workflows').all().length }}\n\n## Files\nEach workflow is saved as a separate JSON file with the format\n\n---\n*Automatically generated by N8N Backup Workflow*\n"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        64,
        -480
      ],
      "id": "1dd24eba-ff2d-46b1-b781-256dd9d02d4f",
      "name": "Create a file1",
      "webhookId": "2564c889-3d51-4e3d-9540-0d9c4a2819ec",
      "credentials": {
        "githubApi": {
          "id": "DjGHIKRB41bTLLdD",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -704,
        -128
      ],
      "id": "587210da-539a-4e2e-a11d-bfb16a5a7057",
      "name": "Schedule Trigger"
    }
  ],
  "connections": {
    "Get many workflows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Get many workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Create a file1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Preper File Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preper File Content": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Create a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a file": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Edit Fields": [
      {
        "json": {
          "folderName": "Backup_2025-10-10",
          "": ""
        }
      }
    ],
    "Get many workflows": [
      {
        "json": {
          "createdAt": "2025-08-29T16:27:43.152Z",
          "updatedAt": "2025-08-29T18:14:45.000Z",
          "id": "DIca4KQLXIirZOMc",
          "name": "My workflow 2",
          "active": false,
          "isArchived": true,
          "nodes": [],
          "connections": {},
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "adf08bf4-95fd-448b-bbe7-eb01c947691f",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-08-29T16:27:43.227Z",
              "updatedAt": "2025-08-29T16:27:43.227Z",
              "role": "workflow:owner",
              "workflowId": "DIca4KQLXIirZOMc",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-28T16:15:13.975Z",
          "updatedAt": "2025-08-29T18:15:02.000Z",
          "id": "FfSYuVZpRDUDBZBp",
          "name": "Meddela Spec",
          "active": false,
          "isArchived": true,
          "nodes": [
            {
              "parameters": {
                "options": {}
              },
              "type": "n8n-nodes-base.emailReadImap",
              "typeVersion": 2.1,
              "position": [
                -288,
                16
              ],
              "id": "b22986e3-43ba-47af-a7f4-6398a645c470",
              "name": "Email Trigger (IMAP)",
              "credentials": {
                "imap": {
                  "id": "VAWoBpV0uW4Dh3AX",
                  "name": "IMAP account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "967e2b50-efea-48a7-b796-c946edf54708",
                      "leftValue": "={{$json[\"from\"]}}",
                      "rightValue": "conzpiro@gmail.com",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    },
                    {
                      "id": "df6a1084-d54f-4c09-b18b-4710bc7196c7",
                      "leftValue": "={{$json[\"from\"]}}",
                      "rightValue": "dan@tldrnewsletter.com",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    },
                    {
                      "id": "70ac75bd-b9cd-4be4-94c3-07637bf77725",
                      "leftValue": "={{$json[\"from\"]}}",
                      "rightValue": "joel.lundgren@osteraker.se",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "or"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -80,
                16
              ],
              "id": "2a32364e-b742-4a65-bc1e-a20d4e2d05ee",
              "name": "If"
            },
            {
              "parameters": {
                "mode": "runOnceForEachItem",
                "jsCode": "// === Build Single Message with encoding fix (HTML) ===\n// MODE: Run once for each item\nconst MAX = 3500;\n\nfunction esc(s){\n  return String(s ?? '')\n    .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\n}\nfunction stripHtml(s){\n  return String(s ?? '')\n    .replace(/<style[\\s\\S]*?<\\/style>/gi,' ')\n    .replace(/<script[\\s\\S]*?<\\/script>/gi,' ')\n    .replace(/<[^>]+>/g,' ')\n    .replace(/&nbsp;/gi,' ')\n    .replace(/\\s+/g,' ')\n    .trim();\n}\nfunction fixEncoding(s){\n  if (!s) return s;\n  const looksBroken = /Ã|Â|â€|â€“|â€”/.test(s);\n  if (!looksBroken) return s;\n  try { return Buffer.from(s, 'latin1').toString('utf8'); }\n  catch(e){ try { return decodeURIComponent(escape(s)); } catch(_){ return s; } }\n}\nfunction pick(...arr){ for (const v of arr) if (typeof v==='string' && v.trim()) return v; return ''; }\n\nconst from    = pick($json.from, $json.sender, 'okänd avsändare');\nconst subject = pick($json.subject, '(utan ämne)');\n\nlet plain = pick($json.text, $json.textPlain, $json.plainText, $json.body, $json.message, $json.snippet);\nlet html  = pick($json.html, $json.textHtml, $json.bodyHtml);\n\nplain = fixEncoding(plain);\nhtml  = fixEncoding(html);\n\nlet body = (plain && plain.trim()) ? plain.trim() : stripHtml(html);\nif (!body) body = '(inget brödtextinnehåll hittades i mailet)';\n\nlet full =\n  `📧 <b>Nytt mail från godkänd avsändare</b>\\n` +\n  `<b>Från:</b> ${esc(from)}\\n` +\n  `<b>Ämne:</b> ${esc(subject)}\\n\\n` +\n  esc(body);\n\nif (full.length > MAX) full = full.slice(0, MAX - 1) + '…';\n\nreturn { json: { message: full } };\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                128,
                -80
              ],
              "id": "deb33322-b552-44af-8879-86587840f405",
              "name": "Code"
            },
            {
              "parameters": {
                "chatId": "8452676547",
                "text": "={{$json[\"message\"]}}\n",
                "additionalFields": {
                  "disable_web_page_preview": true,
                  "parse_mode": "HTML"
                }
              },
              "type": "n8n-nodes-base.telegram",
              "typeVersion": 1.2,
              "position": [
                336,
                -80
              ],
              "id": "a747cb32-4ebc-4ddb-aa81-97e306f500f1",
              "name": "Send a text message",
              "webhookId": "49c688c1-80ba-494d-a60f-a7c8292ee533",
              "credentials": {
                "telegramApi": {
                  "id": "7NKBIMQRWzjXDg0e",
                  "name": "Telegram account"
                }
              }
            }
          ],
          "connections": {
            "Email Trigger (IMAP)": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Code",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code": {
              "main": [
                [
                  {
                    "node": "Send a text message",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": {
            "node:Email Trigger (IMAP)": {
              "lastMessageUid": 55436
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "5dccb68e-f76e-46d8-ac2c-14ff02af42d1",
          "triggerCount": 1,
          "shared": [
            {
              "createdAt": "2025-08-28T16:15:13.990Z",
              "updatedAt": "2025-08-28T16:15:13.990Z",
              "role": "workflow:owner",
              "workflowId": "FfSYuVZpRDUDBZBp",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-30T13:38:10.907Z",
          "updatedAt": "2025-08-30T13:38:10.907Z",
          "id": "L1aOJXEsaB7X10LQ",
          "name": "My workflow 4",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "public": true,
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.chatTrigger",
              "typeVersion": 1.3,
              "position": [
                0,
                0
              ],
              "id": "ac0b4d76-b498-4019-9db9-4f6b98cebbd0",
              "name": "When chat message received",
              "webhookId": "1a765915-2dc4-4450-b75b-d060e96d6901"
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.2,
              "position": [
                208,
                0
              ],
              "id": "23542411-6aa6-43f8-b45a-0da9b5fd31c3",
              "name": "AI Agent"
            }
          ],
          "connections": {
            "When chat message received": {
              "main": [
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "42a299d4-a30f-431b-a6bc-7b5d1aacae13",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-08-30T13:38:10.917Z",
              "updatedAt": "2025-08-30T13:38:10.917Z",
              "role": "workflow:owner",
              "workflowId": "L1aOJXEsaB7X10LQ",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-26T22:46:05.588Z",
          "updatedAt": "2025-08-29T18:14:53.000Z",
          "id": "OgFgwa6hdOB3VtJ5",
          "name": "HealthCheck Webhook",
          "active": false,
          "isArchived": true,
          "nodes": [
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -752,
                -320
              ],
              "id": "4623b13a-9f54-41bf-ad11-e8210a11f555",
              "name": "When clicking ‘Execute workflow’"
            },
            {
              "parameters": {
                "chatId": "8452676547",
                "text": "=Hej jag testar!",
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.telegram",
              "typeVersion": 1.2,
              "position": [
                -448,
                -320
              ],
              "id": "9d599020-5a55-411d-8f84-efe7b46beaa8",
              "name": "Send a text message",
              "webhookId": "a890006f-a7b1-40f9-bd7d-78ef82e7620c",
              "credentials": {
                "telegramApi": {
                  "id": "7NKBIMQRWzjXDg0e",
                  "name": "Telegram account"
                }
              }
            }
          ],
          "connections": {
            "When clicking ‘Execute workflow’": {
              "main": [
                [
                  {
                    "node": "Send a text message",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "8d0754e8-5931-4953-bd8a-ff90bf2f823b",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-08-26T22:46:05.597Z",
              "updatedAt": "2025-08-26T22:46:05.597Z",
              "role": "workflow:owner",
              "workflowId": "OgFgwa6hdOB3VtJ5",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-09-23T22:26:46.299Z",
          "updatedAt": "2025-10-08T12:52:04.000Z",
          "id": "QsUbhYVcmbMuU8ly",
          "name": "Analys Logbook",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                0,
                -992
              ],
              "id": "b48116d7-aff9-4697-8f8f-a68d4fa055e8",
              "name": "When clicking ‘Execute workflow’"
            },
            {
              "parameters": {
                "resource": "fileFolder",
                "filter": {
                  "folderId": {
                    "__rl": true,
                    "value": "1EAClc0GI63AJHm-cLm-iFMKkydP5SWDj",
                    "mode": "list",
                    "cachedResultName": "The Logbook - Sammanställningar",
                    "cachedResultUrl": "https://drive.google.com/drive/folders/1EAClc0GI63AJHm-cLm-iFMKkydP5SWDj"
                  }
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                224,
                -992
              ],
              "id": "28bcace8-edb1-4e5d-a2a5-fe46ff2ab26c",
              "name": "Search files and folders",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "R75QT2qp1rBLDWUh",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{$json[\"name\"]}}",
                            "rightValue": "rapport.xlsx",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "id": "48bc5fa7-2379-452b-af16-326e7784432a"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Rapport"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "49980460-3bef-4d5f-99c5-a136ec8ed30b",
                            "leftValue": "={{$json[\"name\"]}}",
                            "rightValue": "antal.xlsx",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Antal"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                448,
                -992
              ],
              "id": "7c5d8520-8eec-45d7-911e-c9ec064dc8d1",
              "name": "Switch"
            },
            {
              "parameters": {
                "operation": "download",
                "fileId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                672,
                -1088
              ],
              "id": "e76dceb6-e50b-4ad1-a5d6-4501db2b6c31",
              "name": "Download - Rapport",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "R75QT2qp1rBLDWUh",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "operation": "download",
                "fileId": {
                  "__rl": true,
                  "value": "={{ $json.id }}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                672,
                -896
              ],
              "id": "4eb247d7-a257-4966-9a67-b571a26bb346",
              "name": "Download - Antal",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "R75QT2qp1rBLDWUh",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "mode": "combine",
                "fieldsToMatchString": "Datum",
                "options": {}
              },
              "type": "n8n-nodes-base.merge",
              "typeVersion": 3.2,
              "position": [
                1344,
                -992
              ],
              "id": "dcd3a46b-a257-4ee4-92b5-c3e430286c5e",
              "name": "Merge"
            },
            {
              "parameters": {
                "operation": "xlsx",
                "binaryPropertyName": "=data",
                "options": {
                  "headerRow": true
                }
              },
              "type": "n8n-nodes-base.extractFromFile",
              "typeVersion": 1,
              "position": [
                896,
                -896
              ],
              "id": "0dfb370f-685d-42fc-94f0-4b1406daf250",
              "name": "Extract Antal"
            },
            {
              "parameters": {
                "operation": "xlsx",
                "options": {
                  "headerRow": true
                }
              },
              "type": "n8n-nodes-base.extractFromFile",
              "typeVersion": 1,
              "position": [
                896,
                -1088
              ],
              "id": "5e471194-330d-4ca8-8d63-57722ea79066",
              "name": "Extract Rapport"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "f9be285a-77a6-44fe-825c-ed09559df02e",
                      "name": "Datum",
                      "value": "={{ $json[\"Datum\"].split(\" \")[0] }}\n",
                      "type": "string"
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                1120,
                -1088
              ],
              "id": "c88e14a8-c3f5-43ae-be55-3b7034e98dcd",
              "name": "DatumFixRapport"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "f9be285a-77a6-44fe-825c-ed09559df02e",
                      "name": "Datum",
                      "value": "={{ $json[\"Datum\"].split(\" \")[0] }}\n",
                      "type": "string"
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                1120,
                -896
              ],
              "id": "5bb90e46-6370-40b4-8cf4-a22f0c9c1375",
              "name": "DatumFixAntal"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "c8f043b0-39f8-4f0f-9297-bb2553793132",
                      "name": "prompt",
                      "value": "=Grupp:{{ $json.Grupp }}\\n Datum: {{$json[\"Datum\"]}}\\n Statistik: {{$json[\"Tjejer\"]}} tjejer, {{$json[\"Killar\"]}} killar, {{ $json['Icke-binära'] }} icke-binära, {{$json[\"Personal\"]}} personal\nÅldersgrupper: 13-15:{{ $json['13-15'] }}, 16-19:{{ $json['16-19'] }}\n\nRapport: \n{{$json[\"Anteckningar\"]}}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                1568,
                -992
              ],
              "id": "e96df663-8931-4c10-b82b-3d4fe630375f",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "modelId": {
                  "__rl": true,
                  "value": "gpt-4.1-mini",
                  "mode": "list",
                  "cachedResultName": "GPT-4.1-MINI"
                },
                "messages": {
                  "values": [
                    {
                      "content": "=Du är en objektiv analysassistent. Du får data från fritidsgårdsverksamhet i form av statistik och rapporttext.\n\nUppdrag:\n1. Sammanfatta kort vad som hände (2–5 meningar).\n2. Beskriv stämningen (t.ex. lugnt, stökigt, kreativt).\n3. Kommentera ungdomsdelaktighet (initiativ, inflytande, ansvar).\n4. Kommentera behovsanalys (behov eller önskemål uppmärksammades?).\n5. Kommentera relationsskapande (relationer mellan personal och ungdomar).\n6. Ge en reflekterande poäng mellan 0–10 för hur beskrivande rapporten är.\n7. Redovisa även detaljerad besöksstatistik (antal tjejer, killar, icke-binära och personal).  \n8. Redovisa antal i åldersgrupper (13–15 år, 16–19 år).  \n9. Räkna ut summan av alla deltagare (tjejer + killar + icke-binära).\n10. Analys:Vad anser du saknas i denna rapport (svårt att hitta sammanhang, för lite information, saknar reflektion, vem gjorde vad)\n\n⚠️ Viktigt: Svara **endast i JSON-format** enligt detta schema:\n{\n  \"Grupp\": \"...\",\n  \"Datum\": \"...\",\n  \"Sammanfattning\": \"...\",\n  \"Stämning\": \"...\",\n  \"Ungdomsdelaktighet\": \"...\",\n  \"Behovsanalys\": \"...\",\n  \"Relationsskapande\": \"...\",\n  \"Analys\": \"...\",\n  \"Refletionspoäng\": \"...\",\n  \"Besöksstatistik\": {\n    \"Tjejer\": 0,\n    \"Killar\": 0,\n    \"IckeBinära\": 0,\n    \"Personal\": 0,\n    \"Ålder_13_15\": 0,\n    \"Ålder_16_19\": 0,\n    \"Totalt\": 0\n  }\n}\n",
                      "role": "system"
                    },
                    {
                      "content": "=Här är data att analysera:\n{{$json[\"prompt\"]}}"
                    }
                  ]
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.openAi",
              "typeVersion": 1.8,
              "position": [
                1792,
                -992
              ],
              "id": "12ba244d-9555-4b86-8f3b-41024c63cfb5",
              "name": "Message a model",
              "credentials": {
                "openAiApi": {
                  "id": "qlVANgHQVRewZMT0",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "return items.map(item => {\n  let raw = item.json.message?.content ?? \"\";\n\n  if (typeof raw === \"object\") {\n    return { json: raw };\n  }\n\n  raw = raw\n    .trim()\n    .replace(/^```(json)?/i, \"\")\n    .replace(/```$/, \"\")\n    .replace(/^.*?(\\{)/s, \"{\")\n    .replace(/(\\})[^}]*$/, \"}\");\n\n  try {\n    let parsed = JSON.parse(raw);\n\n    // Om JSON ligger som sträng inuti JSON\n    if (typeof parsed === \"string\") {\n      parsed = JSON.parse(parsed);\n    }\n\n    return { json: parsed };\n  } catch (err) {\n    return { json: { error: \"Kunde inte parsa GPT-output\", raw } };\n  }\n});\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2144,
                -992
              ],
              "id": "be0bc19c-f556-4591-ac2e-b2c7130aebc7",
              "name": "Parse 2 Nice JSON"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "edb6df5e-c1d1-4a29-a15f-1e110de7c4f5",
                      "name": "docContent",
                      "value": "=📅 Datum: {{$json[\"Datum\"]}}\n\n📝 Sammanfattning:\n{{$json[\"Sammanfattning\"]}}\n\n🌡️ Stämning:\n{{$json[\"Stämning\"]}}\n\n🙋 Ungdomsdelaktighet:\n{{$json[\"Ungdomsdelaktighet\"]}}\n\n📌 Behovsanalys:\n{{$json[\"Behovsanalys\"]}}\n\n🤝 Relationsskapande:\n{{$json[\"Relationsskapande\"]}}\n\n⭐ Reflektionspoäng:\n{{$json[\"Reflektionspoäng\"]}} / 10\n\nBesöksstatistik\nKillar: {{ $json['Besöksstatistik'].Killar }}\nTjejer: {{ $json['Besöksstatistik'].Tjejer }}\n\n",
                      "type": "string"
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                2368,
                -1088
              ],
              "id": "8cc25e0f-2981-4347-8dbc-3712fb30008b",
              "name": "Edit Fields1"
            },
            {
              "parameters": {
                "operation": "createFromText",
                "content": "={{$json[\"docContent\"]}}\n{{ $json.choices[0].message.content }}",
                "name": "=Sammanställning-{{$now.toFormat(\"yyyy-LL-dd\")}}",
                "driveId": {
                  "__rl": true,
                  "value": "My Drive",
                  "mode": "list",
                  "cachedResultName": "My Drive",
                  "cachedResultUrl": "https://drive.google.com/drive/my-drive"
                },
                "folderId": {
                  "__rl": true,
                  "value": "1EAClc0GI63AJHm-cLm-iFMKkydP5SWDj",
                  "mode": "list",
                  "cachedResultName": "The Logbook - Sammanställningar",
                  "cachedResultUrl": "https://drive.google.com/drive/folders/1EAClc0GI63AJHm-cLm-iFMKkydP5SWDj"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                3392,
                -1088
              ],
              "id": "5ae574d6-ae83-4a70-9c29-218458457b1c",
              "name": "Create file from text",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "R75QT2qp1rBLDWUh",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "let content = \"\";\n\nfor (const item of items) {\n  const d = item.json;\n\n  content += `📅 Datum: ${d.Datum || \"\"}\\n\\n`;\n  content += `📝 Sammanfattning:\\n${d.Sammanfattning || \"\"}\\n\\n`;\n  content += `🌡️ Stämning:\\n${d.Stämning || \"\"}\\n\\n`;\n  content += `🙋 Ungdomsdelaktighet:\\n${d.Ungdomsdelaktighet || \"\"}\\n\\n`;\n  content += `📌 Behovsanalys:\\n${d.Behovsanalys || \"\"}\\n\\n`;\n  content += `🤝 Relationsskapande:\\n${d.Relationsskapande || \"\"}\\n\\n`;\n  content += `⭐ Reflektionspoäng:\\n${d.Reflektionspoäng || \"\"} / 10\\n\\n`;\n\n  if (d.Besöksstatistik) {\n    content += `👥 Besöksstatistik:\\n`;\n    content += `- Tjejer: ${d.Besöksstatistik.Tjejer || 0}\\n`;\n    content += `- Killar: ${d.Besöksstatistik.Killar || 0}\\n`;\n    content += `- Icke-binära: ${d.Besöksstatistik.IckeBinära || 0}\\n`;\n    content += `- Personal: ${d.Besöksstatistik.Personal || 0}\\n`;\n    content += `- Ålder 13-15: ${d.Besöksstatistik[\"Ålder_13_15\"] || 0}\\n`;\n    content += `- Ålder 16-19: ${d.Besöksstatistik[\"Ålder_16_19\"] || 0}\\n`;\n    content += `- Totalt: ${d.Besöksstatistik.Totalt || 0}\\n\\n`;\n  }\n\n  content += `--------------------------------------\\n\\n`;\n}\n\n// Returnera bara ETT objekt\nreturn [\n  {\n    json: {\n      docContent: content\n    }\n  }\n];\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2592,
                -1088
              ],
              "id": "12a790f0-610b-4190-a796-847aeae83efd",
              "name": "Code",
              "executeOnce": false,
              "retryOnFail": false,
              "notesInFlow": false,
              "alwaysOutputData": false
            },
            {
              "parameters": {
                "modelId": {
                  "__rl": true,
                  "value": "gpt-4.1-mini",
                  "mode": "list",
                  "cachedResultName": "GPT-4.1-MINI"
                },
                "messages": {
                  "values": [
                    {
                      "content": "=Du är en objektiv analysassistent. Du får en samling dagliga rapporter från en fritidsgårdsverksamhet. \nDitt uppdrag är att skapa en sammanfattande slutsats som personalen kan använda i reflektion och planering. \n\nUppdrag:\n1. Identifiera återkommande mönster i stämning, ungdomsdelaktighet, behovsanalys och relationsskapande.\n2. Lyft fram både styrkor och utmaningar i verksamheten.\n3. Inkludera 3–5 representativa citat eller korta utdrag från rapporterna (välj de som bäst visar stämning, delaktighet eller behov).\n4. Ge en översiktlig besöksbild: genomsnittlig närvaro, balans mellan tjejer, killar, icke-binära och åldersgrupper. Räkna inte in personalantal i sammaställda antal, redovisa separat.\n5. Kommentera särskilda avvikelser eller händelser som sticker ut.\n6. Avsluta med en sammanfattande reflektion (3–4 meningar) som kan användas som underlag för utvecklingsarbete.\n7. Lista tips hur fritidsledarna kan formulera sina rapporter på effektivare sätt och tänk kontruktivt. Basera detta på Analys.\n8. Ge mig en positiv text om resultatet som kan läsas upp för personalen.\n\n⚠️ Viktigt: Svara i ren text (ingen JSON).\n",
                      "role": "system"
                    },
                    {
                      "content": "=Här är data att analysera:\n{{ $json.docContent }}"
                    }
                  ]
                },
                "simplify": false,
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.openAi",
              "typeVersion": 1.8,
              "position": [
                2800,
                -1264
              ],
              "id": "85cd7425-cc82-4f9c-869b-355db83028c4",
              "name": "Message a model1",
              "credentials": {
                "openAiApi": {
                  "id": "qlVANgHQVRewZMT0",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "mode": "combine",
                "combineBy": "combineByPosition",
                "options": {}
              },
              "type": "n8n-nodes-base.merge",
              "typeVersion": 3.2,
              "position": [
                2896,
                -992
              ],
              "id": "53236450-53f8-4fe4-8722-d9017ef21e0b",
              "name": "Merge1"
            },
            {
              "parameters": {
                "inputDataFieldName": "=data",
                "name": "=RappORT.txt",
                "driveId": {
                  "__rl": true,
                  "value": "My Drive",
                  "mode": "list",
                  "cachedResultName": "My Drive",
                  "cachedResultUrl": "https://drive.google.com/drive/my-drive"
                },
                "folderId": {
                  "__rl": true,
                  "value": "1EAClc0GI63AJHm-cLm-iFMKkydP5SWDj",
                  "mode": "list",
                  "cachedResultName": "The Logbook - Sammanställningar",
                  "cachedResultUrl": "https://drive.google.com/drive/folders/1EAClc0GI63AJHm-cLm-iFMKkydP5SWDj"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleDrive",
              "typeVersion": 3,
              "position": [
                2784,
                -656
              ],
              "id": "836548fe-15b8-4d03-bcc9-5c3502e3ed30",
              "name": "Upload file",
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "R75QT2qp1rBLDWUh",
                  "name": "Google Drive account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const items = $input.all();\n\n// Flatten-funktion för att göra alla fält separata kolumner\nfunction flatten(obj, prefix = \"\") {\n  let res = {};\n  for (let key in obj) {\n    if (typeof obj[key] === \"object\" && obj[key] !== null) {\n      Object.assign(res, flatten(obj[key], prefix + key + \"_\"));\n    } else {\n      res[prefix + key] = obj[key];\n    }\n  }\n  return res;\n}\n\nconst flatItems = items.map(i => flatten(i.json));\nconst headers = Object.keys(flatItems[0]);\n\n// Bygg tabbavgränsad text\nlet txt = headers.join(\"\\t\") + \"\\r\\n\";  // CRLF\n\nfor (const item of flatItems) {\n  const row = headers.map(h => {\n    let val = item[h] || \"\";\n    val = val.toString()\n             .replace(/\\r?\\n|\\r/g, \" \")  // inga radbrytningar i celler\n             .replace(/\\t/g, \" \");       // inga tabb i celler\n    return val;\n  });\n  txt += row.join(\"\\t\") + \"\\r\\n\";\n}\n\n// BOM + UTF-16LE (mest kompatibelt med InDesign)\nconst bom = Buffer.from([0xFF, 0xFE]); // UTF-16LE BOM\nconst utf16 = Buffer.from(txt, \"utf16le\");\n\n// Slå ihop BOM + data\nconst finalBuffer = Buffer.concat([bom, utf16]);\n\nreturn [\n  {\n    json: {},\n    binary: {\n      data: {\n        data: finalBuffer.toString(\"base64\"),\n        mimeType: \"text/plain\",\n        fileName: \"rapport.txt\"\n      }\n    }\n  }\n];\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2368,
                -832
              ],
              "id": "e0f3e1b1-211f-4c0f-bfca-cdc1d81956ed",
              "name": "TXT KOMMASEPARERAT"
            }
          ],
          "connections": {
            "When clicking ‘Execute workflow’": {
              "main": [
                [
                  {
                    "node": "Search files and folders",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Search files and folders": {
              "main": [
                [
                  {
                    "node": "Switch",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Switch": {
              "main": [
                [
                  {
                    "node": "Download - Rapport",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Download - Antal",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Download - Rapport": {
              "main": [
                [
                  {
                    "node": "Extract Rapport",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Download - Antal": {
              "main": [
                [
                  {
                    "node": "Extract Antal",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Extract Antal": {
              "main": [
                [
                  {
                    "node": "DatumFixAntal",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Extract Rapport": {
              "main": [
                [
                  {
                    "node": "DatumFixRapport",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "DatumFixRapport": {
              "main": [
                [
                  {
                    "node": "Merge",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "DatumFixAntal": {
              "main": [
                [
                  {
                    "node": "Merge",
                    "type": "main",
                    "index": 1
                  }
                ]
              ]
            },
            "Merge": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Message a model",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Message a model": {
              "main": [
                [
                  {
                    "node": "Parse 2 Nice JSON",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Parse 2 Nice JSON": {
              "main": [
                [
                  {
                    "node": "Edit Fields1",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "TXT KOMMASEPARERAT",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields1": {
              "main": [
                [
                  {
                    "node": "Code",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code": {
              "main": [
                [
                  {
                    "node": "Message a model1",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Merge1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Message a model1": {
              "main": [
                [
                  {
                    "node": "Create file from text",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Merge1": {
              "main": [
                [
                  {
                    "node": "Create file from text",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "TXT KOMMASEPARERAT": {
              "main": [
                [
                  {
                    "node": "Upload file",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {
            "Message a model": [
              {
                "json": {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": "```json\n{\n  \"Grupp\": \"Drop In - BG\",\n  \"Datum\": \"2025-10-07\",\n  \"Sammanfattning\": \"Under arbetsdagen har personal haft samtal med ungdomar kring en pågående ryktesspridning för att förebygga oro. Det anordnades ett spontant Girl Talk-möte som övergick till pizzabak med tjejfokus. Några ungdomar som inte följde tillsägelser bads lämna, och planeras samtalas med nästa dag. Fotogruppen och Musikproduktionsgruppen var aktiva, samt D&D-gruppen fick en genomgång av inspelningsutrustning. En ny ungdom deltog och en började laga gitarr.\",\n  \"Stämning\": \"Stämningen beskrivs som livlig och engagerad med bra drag, men också med vissa utmaningar kring disciplin och rykten som orsakat oro bland ungdomarna.\",\n  \"Ungdomsdelaktighet\": \"Ungdomarna visade initiativ genom att delta i olika grupper som fotogrupp, musikproduktion, D&D och pizzabak. Några ungdomar tog också ansvar att göra enkäter och visa intresse att driva fiket vidare tillsammans med personal.\",\n  \"Behovsanalys\": \"Rapporten uppmärksammar behov av tydligare rutiner för ungdomar som hänger utanför toaletter och beslut om verksamheten på uteplatsen. Behovet av fler gitarrsträngar och snabb hantering av rykten lyfts också fram.\",\n  \"Relationsskapande\": \"Personal har arbetat med samtal både med berörda ungdomar och i grupp, vilket visar på en aktiv relationsbyggande process. Även personalens vilja att följa upp situationer på individnivå indikerar goda relationer och ansvarstagande.\",\n  \"Analys\": \"Rapporten ger en bra översikt av aktiviteter och situationer under dagen men saknar tydligare struktur kring vem som ansvarar för vad. Det finns viss reflektion kring arbetssätt och behov men mer detaljerad uppföljning och kontext kring ryktena skulle förbättra förståelsen.\",\n  \"Refletionspoäng\": 7,\n  \"Besöksstatistik\": {\n    \"Tjejer\": 27,\n    \"Killar\": 34,\n    \"IckeBinära\": 7,\n    \"Personal\": 7,\n    \"Ålder_13_15\": 38,\n    \"Ålder_16_19\": 30,\n    \"Totalt\": 68\n  }\n}\n```",
                    "refusal": null,
                    "annotations": []
                  },
                  "logprobs": null,
                  "finish_reason": "stop"
                }
              },
              {
                "json": {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": "{\n  \"Grupp\": \"Drop In - BG\",\n  \"Datum\": \"2025-10-06\",\n  \"Sammanfattning\": \"Ungdomarna fokuserade på att fylla i Mötesplatsenkäten, vilket gick mycket bra. Diskussioner om pantsystemet och spelkontrollerna fördes, och ungdomar tog initiativ till att öppna fiket. Det fanns en incident med vaping inomhus och vissa upprepade oacceptabla beteenden noterades. D&D-gruppen har bokat in sina första träffar i poddrummet nästa vecka.\",\n  \"Stämning\": \"Trycket var bra och aktivt med ett positivt fokus trots att något spel inte var tillgängligt, men inslag av oro fanns på grund av oacceptabla skämt och regelbrott.\",\n  \"Ungdomsdelaktighet\": \"Ungdomarna visade initiativ både genom att aktivt delta i enkäten och föreslå förbättringar för pantsystemet och spelkontrollerna. Några tog ansvar för fiket. Delaktigheten i beslut kring verksamheten är på gång men behöver stärkts ytterligare.\",\n  \"Behovsanalys\": \"Ungdomars behov och förslag uppmärksammades, särskilt gällande pantsystem och spelkontroller. Problematiken kring ansvar för möblemang och regler kring vaping pekar på behov av tydligare regler och uppföljning.\",\n  \"Relationsskapande\": \"Personal tog aktivt ansvar att hantera incidenter och samtal, vilket visar ett pågående arbete för att bygga relationer och gemensamt normskapande, trots utmaningar med vissa ungdomars beteende.\",\n  \"Analys\": \"Rapporten ger en bra beskrivning av händelser och reflektioner, men saknar tydlig fördelning av ansvar och en mer systematisk genomgång av resultat från enkäten. Kontext och uppföljning på påpekade problem skulle kunna utvecklas mer.\",\n  \"Refletionspoäng\": \"7\",\n  \"Besöksstatistik\": {\n    \"Tjejer\": 16,\n    \"Killar\": 23,\n    \"IckeBinära\": 4,\n    \"Personal\": 3,\n    \"Ålder_13_15\": 29,\n    \"Ålder_16_19\": 14,\n    \"Totalt\": 43\n  }\n}",
                    "refusal": null,
                    "annotations": []
                  },
                  "logprobs": null,
                  "finish_reason": "stop"
                }
              },
              {
                "json": {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": "{\n  \"Grupp\": \"Drop In - HELG\",\n  \"Datum\": \"2025-10-04\",\n  \"Sammanfattning\": \"På grund av stormigt och dåligt väder kom färre ungdomar än vanligt, men de som var där stannade hela kvällen. En filmkväll anordnades som önskades av ungdomarna, med snacks och visning i kreativa. Efter filmen blev det lätt stökigt men personalen lyckades snabbt återställa lugnet. Några ungdomar spelade trummor i studion, men ingen ungdomsproducerad verksamhet genomfördes.\",\n  \"Stämning\": \"Mysig men under kontroll, med viss oro efter en stillasittande filmvisning då det höll på att bli stökigt men lugnades av personalens ingripande.\",\n  \"Ungdomsdelaktighet\": \"Ungdomarna visade initiativ genom att önska filmkväll och delta i trumspel i studion, dock ingen organiserad ungdomsproducerad verksamhet denna gång.\",\n  \"Behovsanalys\": \"Ungdomarnas önskan om filmkväll togs tillvara och aktiviteter anpassades efter det, vilket visar att deras behov och önskemål uppmärksammades.\",\n  \"Relationsskapande\": \"Personalen visade närvaro och engagemang genom att snabbt ingripa när det blev stökigt och genom att finnas där för ungdomarna under hela kvällen, samt tack vare akutinkallning av Kenneth som stärkte bemanningen.\",\n  \"Analys\": \"Rapporten är relativt informativ gällande vad som hände och personalens reflektioner, men det saknas tydlig information om individspecifika insatser och ungdomens egna ansvar. Mer detaljer om vilka initiativ ungdomarna tog och hur personalen organiserade verksamheten kunde förbättrat rapportens kvalitet.\",\n  \"Refletionspoäng\": \"7\",\n  \"Besöksstatistik\": {\n    \"Tjejer\": 18,\n    \"Killar\": 36,\n    \"IckeBinära\": 2,\n    \"Personal\": 4,\n    \"Ålder_13_15\": 30,\n    \"Ålder_16_19\": 26,\n    \"Totalt\": 56\n  }\n}",
                    "refusal": null,
                    "annotations": []
                  },
                  "logprobs": null,
                  "finish_reason": "stop"
                }
              },
              {
                "json": {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": "{\n  \"Grupp\": \"Drop In - HELG\",\n  \"Datum\": \"2025-10-03\",\n  \"Sammanfattning\": \"Under kvällen öppnade fritidsgården med lugn start och sedan ökade antalet ungdomar till över 40 samtidigt. Fokus låg på sociala aktiviteter som dans, pingis och musik, samt gemenskap och bullbak. Några ungdomar ville spela FIFA-turnering, men kom inte igång, och ett mindre drama vid toaletterna löstes snabbt med ursäkter. Personal hanterade magsjukdom och enligt rapporten var bemanningen tillräcklig men intensiv.\",\n  \"Stämning\": \"Allmänt fin och positiv med gemenskap och glädje, trots enstaka incidenter som snabbt löstes. Ungdomarna uppvisade mycket energi och samspel.\",\n  \"Ungdomsdelaktighet\": \"Ungdomar tog initiativ till olika aktiviteter såsom dans, pingis, musik och förslag på FIFA-turnering vilket visade på inflytande och engagemang. De deltog aktivt i sociala medier och samspelet med personal.\",\n  \"Behovsanalys\": \"Behov av ökad personalstyrka under toppar uppmärksammades, liksom behovet att hålla koll vid toaletter och genomföra stickprovskontroller på väskor. Ungdomarnas behov av sociala och kreativa aktiviteter tillgodosågs i hög grad.\",\n  \"Relationsskapande\": \"Personalen hade en god kontakt med ungdomarna, var närvarande och agerade tryggt, vilket även bekräftades av en orolig förälder. Personalen lyckades också med att snabbt lösa konflikter när de uppstod.\",\n  \"Analys\": \"Rapporten är detaljerad och innehåller både besöksstatistik och beskrivning av aktiviteter, personalens insatser samt reflektioner kring händelser och bemanning. Den saknar dock detaljerad analys av ungdomarnas individuella upplevelser och uppföljning av incidenter samt tydlig fördelning av arbetsuppgifter mellan personal.\",\n  \"Refletionspoäng\": 8,\n  \"Besöksstatistik\": {\n    \"Tjejer\": 34,\n    \"Killar\": 36,\n    \"IckeBinära\": 13,\n    \"Personal\": 6,\n    \"Ålder_13_15\": 32,\n    \"Ålder_16_19\": 51,\n    \"Totalt\": 83\n  }\n}",
                    "refusal": null,
                    "annotations": []
                  },
                  "logprobs": null,
                  "finish_reason": "stop"
                }
              },
              {
                "json": {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": "{\n  \"Grupp\": \"Drop In - BG\",\n  \"Datum\": \"2025-10-02\",\n  \"Sammanfattning\": \"Det var en mycket välbesökt dag med 92 ungdomar. Aktiviteten fokuserade på ungdomsproducerade initiativ som möte för övernattning, cosplay, podcasting, musikstudion och bakning. Pant-lösningen fungerade bra och flera grupper samarbetade för olika projekt. Konflikter kring attityder och beteende uppmärksammades, liksom utmaningar med lokal användning, till exempel vid toaletterna och fiket.\",\n  \"Stämning\": \"Stämningen var överlag kreativ och engagerad med mycket aktivitet, men några få ungdomar visade tröttsam attityd och trots mot regler gällande att äta i soffor och beteende vid toaletterna.\",\n  \"Ungdomsdelaktighet\": \"Ungdomarna visade stort initiativ med höjdpunktmöte, poddande, cosplaygrupp, bakning och musikrepetitioner. Det fanns inflytande i planering och ansvarstagande, exempelvis genom diskussion om studiecirkellösning och eget fikansvar.\",\n  \"Behovsanalys\": \"Behov av struktur och ordningsregler kring ätande och användning av toaletter uppmärksammades. Undersökning av celiaki för en ungdom och behov av introduktion till utrustning lyftes. Fältgruppens närvaro visar på stödinsatser för vissa ungdomar.\",\n  \"Relationsskapande\": \"Personalen hade god kontakt med ungdomar och samarbetade i flera aktiviteter. Samtal och planering, både individuellt och i grupper, visar på närvarande personalrelationer och stödjande miljö.\",\n  \"Refletionspoäng\": \"8\",\n  \"Besöksstatistik\": {\n    \"Tjejer\": 39,\n    \"Killar\": 52,\n    \"IckeBinära\": 17,\n    \"Personal\": 7,\n    \"Ålder_13_15\": 62,\n    \"Ålder_16_19\": 46,\n    \"Totalt\": 108\n  },\n  \"Analys\": \"Rapporten ger en bra beskrivning av aktiviteter och bemanning men saknar tydliga fakta om vilka specifika individer som ansvarar för olika delar, vilket skulle kunna höja tydligheten i vem som gör vad. Det finns en del reflektion men för lite analys av orsaker bakom ungdomars negativa beteenden samt hur personalen planerar att arbeta vidare med dessa utmaningar. Rapporten skulle kunna stärkas med mer systematisk behovsanalys kopplat till beteendeproblem och en plan för åtgärder.\"\n}",
                    "refusal": null,
                    "annotations": []
                  },
                  "logprobs": null,
                  "finish_reason": "stop"
                }
              },
              {
                "json": {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": "{\n  \"Grupp\": \"Drop In - BG\",\n  \"Datum\": \"2025-10-01\",\n  \"Sammanfattning\": \"Under passet plockades spelutrustning bort för att minska stök, samtidigt som ungdomar engagerade sig i kreativa aktiviteter som smyckes- och pinstillverkning. Ett pantsystem infördes för låning av spelutrustning vilket fungerade bra. Besök från bandet Räd och fältgruppen ägde rum, samt planering inför höstlovets filmvisningar diskuterades. Personal och ungdomar kommunicerade väl trots vissa utmaningar med personalbrist.\",\n  \"Stämning\": \"Stämningen var överlag bra och lugn med god kommunikation, trots tidigare stök kring spelutrustningen. Ungdomarna accepterade förändringarna utan tjafs och visade kreativitet och initiativförmåga.\",\n  \"Ungdomsdelaktighet\": \"Ungdomarna tog initiativ till att starta och delta i kreativa grupper såsom smyckes- och pinstillverkning. De involverades även i pantsystemet för låning av spelutrustning. Inflytandet märktes genom dialog om aktiviteter och höstlovsönskemål. Ansvar togs för sitt beteende i samband med nya regler.\",\n  \"Behovsanalys\": \"Behovet av lugnare miljö kring spelutrustning uppmärksammades och åtgärdades genom att plocka bort viss utrustning och införa pantsystem. Ungdomarnas önskan om filmvisningar under höstlovet togs emot och planeras att genomföras. Personalens behov av bättre rastlösning vid personalbrist nämndes i reflektionen.\",\n  \"Relationsskapande\": \"Relationerna mellan personal och ungdomar verkar goda med öppen kommunikation och positiv återkoppling, exempelvis stolthet över Albins arbetsinsats. Personal agerade enhetligt och stöttade varandra. Några utmaningar kvarstår vid personalbrist men överlag är samarbetet starkt.\",\n  \"Analys\": \"Rapporten ger en god överblick över aktiviteter och stämning men saknar tydlig information om vem som utförde specifika insatser utöver några namn. Reflektionerna är personliga men skulle vinna på tydligare kopplingar till ungdomars perspektiv och mer systematisk utvärdering. Sammanhang och kontext är någorlunda tydligt, dock kunde mål kopplas tydligare till åtgärder.\",\n  \"Refletionspoäng\": 7,\n  \"Besöksstatistik\": {\n    \"Tjejer\": 22,\n    \"Killar\": 40,\n    \"IckeBinära\": 9,\n    \"Personal\": 6,\n    \"Ålder_13_15\": 30,\n    \"Ålder_16_19\": 41,\n    \"Totalt\": 71\n  }\n}",
                    "refusal": null,
                    "annotations": []
                  },
                  "logprobs": null,
                  "finish_reason": "stop"
                }
              }
            ]
          },
          "versionId": "d521440d-99d0-4fe7-995d-4436ed6cc6ea",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-09-23T22:26:46.311Z",
              "updatedAt": "2025-09-23T22:26:46.311Z",
              "role": "workflow:owner",
              "workflowId": "QsUbhYVcmbMuU8ly",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-10-09T20:19:49.424Z",
          "updatedAt": "2025-10-10T09:34:56.000Z",
          "id": "WGZmNNtndQU4JMfW",
          "name": "BackupWorkflows",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {}
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                -688,
                -288
              ],
              "id": "0baaf9a7-3efe-42ea-8388-31ae9a8f6efd",
              "name": "Schedule Trigger",
              "disabled": true
            },
            {
              "parameters": {
                "filters": {
                  "activeWorkflows": false
                },
                "requestOptions": {}
              },
              "type": "n8n-nodes-base.n8n",
              "typeVersion": 1,
              "position": [
                -304,
                -128
              ],
              "id": "db4583a9-ae76-4469-93c0-1ce4a7a09a1c",
              "name": "Get many workflows",
              "credentials": {
                "n8nApi": {
                  "id": "jwNRIVd8ZIakxVcy",
                  "name": "n8n account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "b153c45d-4498-479a-8a92-ea443810a9b9",
                      "name": "folderName",
                      "value": "=Backup_{{ $now.format('yyyy-MM-dd')}}",
                      "type": "string"
                    },
                    {
                      "id": "85e2daf5-7c4a-4bd3-b89a-0410f3ce9f96",
                      "name": "",
                      "value": "",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -496,
                -128
              ],
              "id": "d3ca148f-6eac-444a-ad4d-7e186cd5b9b1",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                -80,
                -128
              ],
              "id": "98f7ee15-2503-4477-878d-4ea4b70c531f",
              "name": "Loop Over Items"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "45539e5c-8878-42d8-9ded-2505d809d0c3",
                      "name": "nodes",
                      "value": "={{ JSON.stringify($json, null, 2) }}",
                      "type": "string"
                    },
                    {
                      "id": "742fe8b6-bbff-4731-a813-233ca6c8b500",
                      "name": "fileName",
                      "value": "={{ $json.name }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                176,
                -112
              ],
              "id": "ad155d39-a849-4354-9abc-16f8130f813a",
              "name": "Preper File Content"
            },
            {
              "parameters": {
                "operation": "toText",
                "sourceProperty": "nodes",
                "options": {}
              },
              "type": "n8n-nodes-base.convertToFile",
              "typeVersion": 1.1,
              "position": [
                384,
                -128
              ],
              "id": "6207ca3b-e238-4728-bcde-e7fb1527ebd0",
              "name": "Convert to File"
            },
            {
              "parameters": {
                "resource": "file",
                "owner": {
                  "__rl": true,
                  "value": "conzpiro",
                  "mode": "name"
                },
                "repository": {
                  "__rl": true,
                  "value": "n8n-backup",
                  "mode": "list",
                  "cachedResultName": "n8n-backup",
                  "cachedResultUrl": "https://github.com/conzpiro/n8n-backup"
                },
                "filePath": "={{ $('Edit Fields').item.json.folderName }}/{{ $('Preper File Content').item.json.fileName }}",
                "binaryData": true,
                "commitMessage": "={{ $now.setZone('Europe/Stockholm').format('yyyy-MM-dd T') }} Backup completed\n"
              },
              "type": "n8n-nodes-base.github",
              "typeVersion": 1.1,
              "position": [
                608,
                -128
              ],
              "id": "20830b96-ef2e-4a2a-b608-92a72b76b512",
              "name": "Create a file",
              "webhookId": "55188c2d-d3b6-417d-9045-9b6faa43e38f",
              "credentials": {
                "githubApi": {
                  "id": "DjGHIKRB41bTLLdD",
                  "name": "GitHub account"
                }
              },
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "operation": "append",
                "documentId": {
                  "__rl": true,
                  "value": "1p2_9YZGN6t0mLKnzNZ6clkVTGWqAUmq9R7qzr4tWg_k",
                  "mode": "list",
                  "cachedResultName": "Daily Backup n8n",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1p2_9YZGN6t0mLKnzNZ6clkVTGWqAUmq9R7qzr4tWg_k/edit?usp=drivesdk"
                },
                "sheetName": {
                  "__rl": true,
                  "value": "gid=0",
                  "mode": "list",
                  "cachedResultName": "Blad1",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1p2_9YZGN6t0mLKnzNZ6clkVTGWqAUmq9R7qzr4tWg_k/edit#gid=0"
                },
                "columns": {
                  "mappingMode": "defineBelow",
                  "value": {
                    "DateTime": "={{ $now.setZone('Europe/Stockholm').format('yyyy-MM-dd T') }}",
                    "Folder Name": "={{ $('Edit Fields').item.json.folderName }}",
                    "File Name": "={{ $('Preper File Content').item.json.fileName }}",
                    "Error Message": "={{ $json.error }}"
                  },
                  "matchingColumns": [],
                  "schema": [
                    {
                      "id": "DateTime",
                      "displayName": "DateTime",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "Folder Name",
                      "displayName": "Folder Name",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "File Name",
                      "displayName": "File Name",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "Error Message",
                      "displayName": "Error Message",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    }
                  ],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleSheets",
              "typeVersion": 4.7,
              "position": [
                816,
                -32
              ],
              "id": "08cfd05d-7cc6-4c68-b8ee-3ed8faa06b7b",
              "name": "Append row in sheet",
              "credentials": {
                "googleSheetsOAuth2Api": {
                  "id": "mfSpR9qn5T9hu3Km",
                  "name": "Google Sheets account"
                }
              }
            },
            {
              "parameters": {
                "resource": "file",
                "owner": {
                  "__rl": true,
                  "value": "conzpiro",
                  "mode": "name"
                },
                "repository": {
                  "__rl": true,
                  "value": "n8n-backup",
                  "mode": "list",
                  "cachedResultName": "n8n-backup",
                  "cachedResultUrl": "https://github.com/conzpiro/n8n-backup"
                },
                "filePath": "={{ $('Edit Fields').item.json.folderName }}/Readme.md",
                "fileContent": "=# N8N Workflow Backup – {{ $('Edit Fields').item.json.folderName }}\n\nThis folder contains the backup of all N8N workflows as of {{ $now.setZone('Europe/Stockholm').format('yyyy-MM-dd') }}\n\n## Backup Details\n- Backup Time: {{ $now.setZone('Europe/Stockholm').format('yyyy-MM-dd T') }}\n- Total Workflows: {{ $('Get many workflows').all().length }}\n\n## Files\nEach workflow is saved as a separate JSON file with the format\n\n---\n*Automatically generated by N8N Backup Workflow*\n"
              },
              "type": "n8n-nodes-base.github",
              "typeVersion": 1.1,
              "position": [
                112,
                -336
              ],
              "id": "1dd24eba-ff2d-46b1-b781-256dd9d02d4f",
              "name": "Create a file1",
              "webhookId": "2564c889-3d51-4e3d-9540-0d9c4a2819ec",
              "credentials": {
                "githubApi": {
                  "id": "DjGHIKRB41bTLLdD",
                  "name": "GitHub account"
                }
              }
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -672,
                -112
              ],
              "id": "1f8f4bcc-df67-4b89-b1f5-6fbeac3bc9a7",
              "name": "When clicking ‘Execute workflow’"
            }
          ],
          "connections": {
            "Schedule Trigger": {
              "main": [
                []
              ]
            },
            "Get many workflows": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Get many workflows",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [
                  {
                    "node": "Create a file1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Preper File Content",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Preper File Content": {
              "main": [
                [
                  {
                    "node": "Convert to File",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Convert to File": {
              "main": [
                [
                  {
                    "node": "Create a file",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Create a file": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Append row in sheet",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Append row in sheet": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking ‘Execute workflow’": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "33b7538a-8c48-45a3-9ff1-8a4b2cfb3076",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-10-09T20:19:49.435Z",
              "updatedAt": "2025-10-09T20:19:49.435Z",
              "role": "workflow:owner",
              "workflowId": "WGZmNNtndQU4JMfW",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-29T22:36:03.473Z",
          "updatedAt": "2025-09-01T19:40:28.000Z",
          "id": "YNtm41X8aHE96XA9",
          "name": "Test Switch",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "updates": [
                  "message"
                ],
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.telegramTrigger",
              "typeVersion": 1.2,
              "position": [
                -112,
                144
              ],
              "id": "e7c1af74-b7b9-468f-9bb2-3327fe7faf68",
              "name": "Telegram Trigger",
              "webhookId": "5ba2a873-0552-40e4-acf6-72b4d0f4fc9b",
              "credentials": {
                "telegramApi": {
                  "id": "7NKBIMQRWzjXDg0e",
                  "name": "Telegram account"
                }
              }
            },
            {
              "parameters": {
                "chatId": "={{$json[\"chatId\"]}}\n\n",
                "text": "={{$json[\"text\"]}}\n",
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.telegram",
              "typeVersion": 1.2,
              "position": [
                1328,
                464
              ],
              "id": "b9e749f1-24e9-466d-a60c-bddcbff67e1e",
              "name": "Send a text message",
              "webhookId": "42967956-8d9a-4be4-ab7a-73ab43a53d85",
              "credentials": {
                "telegramApi": {
                  "id": "7NKBIMQRWzjXDg0e",
                  "name": "Telegram account"
                }
              }
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{$json[\"message\"][\"text\"].split(\" \")[0]}}",
                            "rightValue": "!hej",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "id": "16f70245-421d-4371-aa19-34032a9f4eac"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Hej"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "78bad6e9-ed0b-4af3-b17a-e04053f3db8c",
                            "leftValue": "={{$json[\"message\"][\"text\"].split(\" \")[0]}}",
                            "rightValue": "!gpt",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Chat-GPT"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "bc468eb7-090a-4a0f-89b7-b75cb47db400",
                            "leftValue": "={{$json[\"message\"][\"text\"].split(\" \")[0]}}",
                            "rightValue": "!RSS",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "RSS"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                128,
                144
              ],
              "id": "1bfc02dd-3816-4383-8d35-09a6ed8168e1",
              "name": "Switch"
            },
            {
              "parameters": {
                "jsCode": "// Hämta hela texten från meddelandet\nconst text = $json[\"message\"][\"text\"];\n\n// Ta bort första ordet (!hej) och spara resten\nconst message = text.split(\" \").slice(1).join(\" \");\n\n// Bygg ihop fast text + användarens text\nconst combined = \"👉 Du skrev efter:\\n\\n\" + (message || \"ingenting 😅\");\n\n// Skicka tillbaka chatId och texten\nreturn {\n  json: {\n    chatId: $json[\"message\"][\"chat\"][\"id\"],\n    text: combined\n  }\n};\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                432,
                80
              ],
              "id": "8f3a0ee5-6a2c-49a4-96c2-87685ebfd1fd",
              "name": "Code1"
            }
          ],
          "connections": {
            "Telegram Trigger": {
              "main": [
                [
                  {
                    "node": "Switch",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Switch": {
              "main": [
                [
                  {
                    "node": "Code1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Send a text message",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "Code1": {
              "main": [
                [
                  {
                    "node": "Send a text message",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "b2ea1cc5-a0a3-4c15-b546-4a84ad397b41",
          "triggerCount": 1,
          "shared": [
            {
              "createdAt": "2025-08-29T22:36:03.483Z",
              "updatedAt": "2025-08-29T22:36:03.483Z",
              "role": "workflow:owner",
              "workflowId": "YNtm41X8aHE96XA9",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-29T18:16:54.644Z",
          "updatedAt": "2025-08-29T18:43:44.000Z",
          "id": "YTCPDiSIvGUeSrsa",
          "name": "My workflow 3",
          "active": false,
          "isArchived": true,
          "nodes": [
            {
              "parameters": {
                "updates": [
                  "message"
                ],
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.telegramTrigger",
              "typeVersion": 1.2,
              "position": [
                0,
                0
              ],
              "id": "ec279cb6-d3d4-4cfe-8893-46a230442e10",
              "name": "Telegram Trigger",
              "webhookId": "2c6f795d-8417-462f-9858-4cfe23ba8382",
              "credentials": {
                "telegramApi": {
                  "id": "7NKBIMQRWzjXDg0e",
                  "name": "Telegram account"
                }
              }
            },
            {
              "parameters": {
                "chatId": "{{$json[\"message\"][\"chat\"][\"8452676547\"]}}",
                "text": "=Du skrev: {{$json[\"message\"][\"text\"]}}",
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.telegram",
              "typeVersion": 1.2,
              "position": [
                208,
                0
              ],
              "id": "10450d53-cbd2-44cd-b079-c70e6b5180f8",
              "name": "Send a text message",
              "webhookId": "b349cdb8-addc-402d-bee8-9984f79df331",
              "credentials": {
                "telegramApi": {
                  "id": "7NKBIMQRWzjXDg0e",
                  "name": "Telegram account"
                }
              }
            }
          ],
          "connections": {
            "Telegram Trigger": {
              "main": [
                [
                  {
                    "node": "Send a text message",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "95a0f8e8-5b2b-4e9d-ab0d-828b5b847f34",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-08-29T18:16:54.670Z",
              "updatedAt": "2025-08-29T18:16:54.670Z",
              "role": "workflow:owner",
              "workflowId": "YTCPDiSIvGUeSrsa",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-26T21:42:28.629Z",
          "updatedAt": "2025-08-29T18:14:58.000Z",
          "id": "ZBnP9Ujri8ZBmYjc",
          "name": "My workflow",
          "active": false,
          "isArchived": true,
          "nodes": [
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "field": "cronExpression",
                      "expression": "0 0 * * *"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                0,
                0
              ],
              "id": "e9ea4182-76ad-4da3-b893-d16f688d415d",
              "name": "Schedule Trigger"
            }
          ],
          "connections": {},
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": null,
          "pinData": {},
          "versionId": "b6ee30c5-a772-40f3-bd5b-f46bdf7a3341",
          "triggerCount": 1,
          "shared": [
            {
              "createdAt": "2025-08-26T21:42:28.696Z",
              "updatedAt": "2025-08-26T21:42:28.696Z",
              "role": "workflow:owner",
              "workflowId": "ZBnP9Ujri8ZBmYjc",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-10-03T07:55:08.564Z",
          "updatedAt": "2025-10-08T19:51:40.000Z",
          "id": "lOHKsPNOWcnB3psP",
          "name": "Nyhetssamlare",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "url": "https://rss.aftonbladet.se/rss2/small/pages/sections/senastenytt/",
                "options": {}
              },
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1.2,
              "position": [
                -384,
                -768
              ],
              "id": "53af1324-ee93-43fb-98d5-6fedb9faa426",
              "name": "Aftonbladet RSS"
            },
            {
              "parameters": {
                "url": "https://feeds.expressen.se/nyheter/",
                "options": {}
              },
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1.2,
              "position": [
                -384,
                -576
              ],
              "id": "82680006-8e8c-4e24-be11-21c460fffc0d",
              "name": "Expressen RSS"
            },
            {
              "parameters": {
                "maxItems": 10
              },
              "type": "n8n-nodes-base.limit",
              "typeVersion": 1,
              "position": [
                -160,
                -768
              ],
              "id": "a1ffbad2-a8f9-4726-9d27-7bbfd6278f47",
              "name": "Limit"
            },
            {
              "parameters": {
                "maxItems": 10
              },
              "type": "n8n-nodes-base.limit",
              "typeVersion": 1,
              "position": [
                -160,
                -576
              ],
              "id": "5ece8d7f-567e-4c6d-ae09-ed8c50ae5761",
              "name": "Limit1"
            },
            {
              "parameters": {
                "maxItems": 10
              },
              "type": "n8n-nodes-base.limit",
              "typeVersion": 1,
              "position": [
                -160,
                -384
              ],
              "id": "9c7cece1-b0b1-45f7-bff0-0b6c4d008b5f",
              "name": "Limit2"
            },
            {
              "parameters": {
                "url": "https://techcrunch.com/feed/",
                "options": {}
              },
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1.2,
              "position": [
                -384,
                -384
              ],
              "id": "87aa9cd9-281e-4120-852f-51cd41d6a776",
              "name": "TechCrunch RSS"
            },
            {
              "parameters": {
                "jsCode": "const items = $input.all();\n\nfunction stripHTML(str) {\n  return str ? str.replace(/<[^>]*>?/gm, '').trim() : '';\n}\n\nfunction parseDate(d) {\n  const date = new Date(d);\n  return isNaN(date.getTime()) ? 0 : date.getTime();\n}\n\nfunction formatDate(d) {\n  try {\n    return new Date(d).toLocaleDateString('sv-SE', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric',\n    });\n  } catch {\n    return '';\n  }\n}\n\n// 1️⃣ sortera nyaste först\nitems.sort(\n  (a, b) =>\n    parseDate(b.json.isoDate || b.json.pubDate) -\n    parseDate(a.json.isoDate || a.json.pubDate)\n);\n\n// 2️⃣ skapa klickbara rader med datum och källa\nconst lines = items.map((i) => {\n  const j = i.json;\n  const title = stripHTML(j.title || 'Ingen titel');\n  const url = j.link || j.url || '';\n  const source =\n    j.feedTitle ||\n    j['dc:creator'] ||\n    j.source ||\n    (j.link ? new URL(j.link).hostname.replace('www.', '') : 'Okänd källa');\n  const date = formatDate(j.isoDate || j.pubDate || j.published || new Date());\n  return `• [${title}](${url}) — ${source} · ${date}`;\n});\n\n// 3️⃣ slå ihop allt till ett meddelande\nconst message = `🗞️ **TechCrunch**\\n` + lines.join('\\n');\n\nreturn [{ json: { content: message } }];"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                64,
                -384
              ],
              "id": "477bca53-1bb3-49b0-876d-c19da4fcfdd1",
              "name": "Code"
            },
            {
              "parameters": {
                "authentication": "webhook",
                "content": "=**Expressen**",
                "options": {},
                "embeds": {
                  "values": [
                    {
                      "description": "={{ $json.content }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.discord",
              "typeVersion": 2,
              "position": [
                288,
                -576
              ],
              "id": "f30df42d-73c6-40b8-8543-c8273e43e983",
              "name": "Discord",
              "webhookId": "6be0b014-0ff9-44d9-bede-ad3e32958a43",
              "credentials": {
                "discordWebhookApi": {
                  "id": "Pn7a74tA19SOGk9R",
                  "name": "Discord Webhook account 2"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const items = $input.all();\n\nfunction stripHTML(str) {\n  return str ? str.replace(/<[^>]*>?/gm, '').trim() : '';\n}\n\nfunction parseDate(d) {\n  const date = new Date(d);\n  return isNaN(date.getTime()) ? 0 : date.getTime();\n}\n\nfunction formatDate(d) {\n  try {\n    return new Date(d).toLocaleDateString('sv-SE', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric',\n    });\n  } catch {\n    return '';\n  }\n}\n\nfunction getHostname(url) {\n  if (!url || typeof url !== 'string') return 'Okänd källa';\n  const match = url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n  return match ? match[1] : 'Okänd källa';\n}\n\n// 1️⃣ sortera nyaste först\nitems.sort(\n  (a, b) =>\n    parseDate(b.json.isoDate || b.json.pubDate) -\n    parseDate(a.json.isoDate || a.json.pubDate)\n);\n\n// 2️⃣ skapa klickbara rader med datum och källa\nconst lines = items.map((i) => {\n  const j = i.json;\n  const title = stripHTML(j.title || 'Ingen titel');\n  const url = j.link || j.url || '';\n  const source =\n    j.feedTitle ||\n    j['dc:creator'] ||\n    j.source ||\n    getHostname(j.link);\n  const date = formatDate(j.isoDate || j.pubDate || j.published || new Date());\n  return `• [${title}](${url}) — ${source} · ${date}`;\n});\n\n// 3️⃣ slå ihop allt till ett meddelande\nconst message = `🗞️ **Expressen**\\n` + lines.join('\\n');\n\nreturn [{ json: { content: message } }];"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                64,
                -576
              ],
              "id": "4049ca3c-58e5-4399-9f17-37e53c143706",
              "name": "Code1"
            },
            {
              "parameters": {
                "authentication": "webhook",
                "content": "=",
                "options": {},
                "embeds": {
                  "values": [
                    {
                      "description": "={{ $json.content }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.discord",
              "typeVersion": 2,
              "position": [
                288,
                -384
              ],
              "id": "0cb31a8b-9d89-4a87-ac55-137ef343aa3e",
              "name": "Discord1",
              "webhookId": "6be0b014-0ff9-44d9-bede-ad3e32958a43",
              "credentials": {
                "discordWebhookApi": {
                  "id": "Pn7a74tA19SOGk9R",
                  "name": "Discord Webhook account 2"
                }
              }
            },
            {
              "parameters": {
                "authentication": "webhook",
                "content": "=**Aftonbladet**",
                "options": {},
                "embeds": {
                  "values": [
                    {
                      "description": "={{ $json.content }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.discord",
              "typeVersion": 2,
              "position": [
                288,
                -768
              ],
              "id": "b086d99e-4334-4f7e-baad-23a2736b7265",
              "name": "Discord2",
              "webhookId": "6be0b014-0ff9-44d9-bede-ad3e32958a43",
              "credentials": {
                "discordWebhookApi": {
                  "id": "Pn7a74tA19SOGk9R",
                  "name": "Discord Webhook account 2"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const items = $input.all();\n\n/**\n * === KONFIGURATION ===\n * Lägg till fler om du har olika format\n */\nconst config = {\n  titleFields: ['title', 'headline', 'item_title'],\n  urlFields: ['link', 'url', 'guid'],\n  dateFields: ['isoDate', 'pubDate', 'published', 'date'],\n  sourceFields: ['feedTitle', 'source', 'author', 'creator']\n};\n\n/**\n * === Hjälpfunktioner ===\n */\nfunction firstAvailable(obj, keys) {\n  for (const key of keys) {\n    if (obj[key]) return obj[key];\n  }\n  return null;\n}\n\nfunction stripHTML(str) {\n  return str ? str.replace(/<[^>]*>?/gm, '').trim() : '';\n}\n\nfunction parseDate(d) {\n  const date = new Date(d);\n  return isNaN(date.getTime()) ? 0 : date.getTime();\n}\n\nfunction formatDate(d) {\n  try {\n    return new Date(d).toLocaleDateString('sv-SE', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    });\n  } catch {\n    return '';\n  }\n}\n\nfunction getHostname(url) {\n  const match = url.match(/https?:\\/\\/([^/]+)/);\n  return match ? match[1].replace('www.', '') : 'Okänd källa';\n}\n\n/**\n * === Huvudlogik ===\n */\n\n// sortera nyaste först\nitems.sort((a, b) => {\n  const adate = firstAvailable(a.json, config.dateFields);\n  const bdate = firstAvailable(b.json, config.dateFields);\n  return parseDate(bdate) - parseDate(adate);\n});\n\n// begränsa till 10 nyaste\nconst latest = items.slice(0, 10);\n\n// bygg utdata\nconst lines = latest.map((i) => {\n  const j = i.json;\n  const title = stripHTML(firstAvailable(j, config.titleFields) || 'Ingen titel');\n  const url = firstAvailable(j, config.urlFields) || '';\n  const source =\n    firstAvailable(j, config.sourceFields) || getHostname(url);\n  const date = formatDate(firstAvailable(j, config.dateFields) || new Date());\n  return `• [${title}](${url}) — ${source} · ${date}`;\n});\n\n// slå ihop till Discord-meddelande\nconst message = `🗞️ **Aftonbladet**\\n` + lines.join('\\n');\n\nreturn [{ json: { content: message } }];\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                64,
                -768
              ],
              "id": "62021cd9-94da-46a9-856c-7626abb06524",
              "name": "Code2"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "d9a7c20a-a42b-4e28-b809-8d45cce1fd52",
                      "leftValue": "={{$json[\"message\"][\"text\"].startsWith(\"nyheter\")}}",
                      "rightValue": "",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -768,
                -576
              ],
              "id": "482419fd-53ff-4edc-9c7b-a527a867b1a6",
              "name": "If"
            }
          ],
          "connections": {
            "Aftonbladet RSS": {
              "main": [
                [
                  {
                    "node": "Limit",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Expressen RSS": {
              "main": [
                [
                  {
                    "node": "Limit1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Limit": {
              "main": [
                [
                  {
                    "node": "Code2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Limit1": {
              "main": [
                [
                  {
                    "node": "Code1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "TechCrunch RSS": {
              "main": [
                [
                  {
                    "node": "Limit2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Limit2": {
              "main": [
                [
                  {
                    "node": "Code",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code": {
              "main": [
                [
                  {
                    "node": "Discord1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code1": {
              "main": [
                [
                  {
                    "node": "Discord",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code2": {
              "main": [
                [
                  {
                    "node": "Discord2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Aftonbladet RSS",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Expressen RSS",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "TechCrunch RSS",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "36b9dc47-7c9c-447f-bcb4-c1d806bc1704",
          "triggerCount": 1,
          "shared": [
            {
              "createdAt": "2025-10-03T07:55:08.572Z",
              "updatedAt": "2025-10-03T07:55:08.572Z",
              "role": "workflow:owner",
              "workflowId": "lOHKsPNOWcnB3psP",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-09-19T11:41:22.083Z",
          "updatedAt": "2025-10-02T14:46:26.000Z",
          "id": "lyGGAm2OqaFELFac",
          "name": "Debattmotor",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "updates": [
                  "*"
                ],
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.telegramTrigger",
              "typeVersion": 1.2,
              "position": [
                0,
                -880
              ],
              "id": "a2e14217-aaed-4407-9b7d-796718615dc7",
              "name": "Telegram Trigger",
              "webhookId": "8ed3678e-61a2-4c66-b5d4-e509fd1afdfd",
              "credentials": {
                "telegramApi": {
                  "id": "QgfPoF1VO69RunyN",
                  "name": "Telegram account 2"
                }
              }
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "!debatt",
                            "rightValue": "={{ $json.message }}",
                            "operator": {
                              "type": "string",
                              "operation": "exists",
                              "singleValue": true
                            },
                            "id": "b79e8a53-0144-49a9-90e9-d3b9ce467c9f"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Debatt"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "b83aac22-b5e2-4423-ae69-c7a302f200b1",
                            "leftValue": "!katt",
                            "rightValue": "",
                            "operator": {
                              "type": "string",
                              "operation": "exists",
                              "singleValue": true
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Katt"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                224,
                -880
              ],
              "id": "06a5f246-9c6a-43a8-9ee8-2c4286e054fe",
              "name": "Switch"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "b6f535cf-0cfe-419c-9c65-c79bc823b184",
                      "name": "message.text",
                      "value": "={{ ($json.message?.text || '').replace(/^(!|\\/)debatt\\s*/i, '') }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                448,
                -880
              ],
              "id": "21702766-3a2a-44fb-b417-9cfdf526751b",
              "name": "Rensa fråga"
            },
            {
              "parameters": {
                "jsCode": "const text = $input.first().json.choices[0].message.content;\nreturn [{ json: { text } }];\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1728,
                -736
              ],
              "id": "b2df01cf-4aa1-478d-bf48-78a5acc0f712",
              "name": "Clean Up Crew"
            },
            {
              "parameters": {
                "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
                "text": "={{ $json.text }}",
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.telegram",
              "typeVersion": 1.2,
              "position": [
                2000,
                -672
              ],
              "id": "29eb2f1b-9aa4-41e4-9d92-3ab274ee3846",
              "name": "Send a text message",
              "webhookId": "11b6f238-9d1f-45de-bebf-3aa1a88221bb",
              "credentials": {
                "telegramApi": {
                  "id": "QgfPoF1VO69RunyN",
                  "name": "Telegram account 2"
                }
              }
            },
            {
              "parameters": {
                "numberInputs": 3
              },
              "type": "n8n-nodes-base.merge",
              "typeVersion": 3.2,
              "position": [
                1952,
                -944
              ],
              "id": "142e1770-da07-4dd3-9b99-48438b18f926",
              "name": "TokenMerge"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "947bcd7b-61c8-48bf-ad63-edd9bcca3673",
                      "name": "usage.total_tokens",
                      "value": "={{ $json.usage.total_tokens }}",
                      "type": "number"
                    },
                    {
                      "id": "7e83a55e-860a-4563-8f4f-3c96965362a0",
                      "name": "model",
                      "value": "={{ $json.model }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                1376,
                -1248
              ],
              "id": "9fb6ef0c-70e8-4928-8b95-d74528fcc916",
              "name": "Set Idéspruta Usage"
            },
            {
              "parameters": {
                "modelId": {
                  "__rl": true,
                  "value": "gpt-4.1-mini",
                  "mode": "list",
                  "cachedResultName": "GPT-4.1-MINI"
                },
                "messages": {
                  "values": [
                    {
                      "content": "=\n {{ $json.message.text }}"
                    },
                    {
                      "content": "Du är en kreativ idéspruta. Ditt jobb är att ge flera originella och oväntade perspektiv på en fråga. Döm eller värdera inte. Du svarar direkt på frågan utan att vara trevlig och plockar inte med dina instruktioner.",
                      "role": "system"
                    }
                  ]
                },
                "simplify": false,
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.openAi",
              "typeVersion": 1.8,
              "position": [
                624,
                -976
              ],
              "id": "83d04991-d9fd-4470-918b-9d40af40c940",
              "name": "Idéspruta",
              "credentials": {
                "openAiApi": {
                  "id": "qlVANgHQVRewZMT0",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "modelId": {
                  "__rl": true,
                  "value": "gpt-4.1-mini",
                  "mode": "list",
                  "cachedResultName": "GPT-4.1-MINI"
                },
                "messages": {
                  "values": [
                    {
                      "content": "={{ $json.choices[0].message.content }}"
                    },
                    {
                      "content": "Du är en objektiv domare i en tankedebatt mellan två AI-roller: en Idéspruta och en Kritiker. Här är först en fråga, följt av Idésprutans förslag och sedan Kritikerns synpunkter. Ditt uppdrag är att balansera argumenten, identifiera styrkor och svagheter, och avsluta med en tydlig slutsats. Svara koncist, respektfullt och med fokus på kvaliteten i argumenten – inte vem som “vann”. Avsluta sedan med em lista med konkreta förslag på hur nästa steg skall tas.\n",
                      "role": "system"
                    }
                  ]
                },
                "simplify": false,
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.openAi",
              "typeVersion": 1.8,
              "position": [
                1376,
                -880
              ],
              "id": "46348827-4b7f-45f8-b8d1-48c492464846",
              "name": "Domare",
              "credentials": {
                "openAiApi": {
                  "id": "qlVANgHQVRewZMT0",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "modelId": {
                  "__rl": true,
                  "value": "gpt-4.1-mini",
                  "mode": "list",
                  "cachedResultName": "GPT-4.1-MINI"
                },
                "messages": {
                  "values": [
                    {
                      "content": "={{ $json.choices[0].message.content }}"
                    },
                    {
                      "content": "Du är en analytisk kritiker. Ditt jobb är att granska idéer, hitta svagheter, ställa kritiska frågor och ifrågasätta resonemanget på ett konstruktivt sätt.u svarar direkt på frågan utan att vara trevlig och plockar inte med dina instruktioner.\n",
                      "role": "system"
                    }
                  ]
                },
                "simplify": false,
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.openAi",
              "typeVersion": 1.8,
              "position": [
                912,
                -736
              ],
              "id": "d2a2d47a-0abf-4c99-882b-717edc2ca77c",
              "name": "Kritiker",
              "credentials": {
                "openAiApi": {
                  "id": "qlVANgHQVRewZMT0",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "6a2156ae-e554-4884-812f-561ec1bb9d25",
                      "name": "usage.total_tokens",
                      "value": "={{ $json.usage.total_tokens }}",
                      "type": "number"
                    },
                    {
                      "id": "16d7687a-58c6-4365-a054-7cf72e9b7df2",
                      "name": "model",
                      "value": "={{ $json.model }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                1728,
                -544
              ],
              "id": "417de6f5-6bde-4b6d-b345-351939978552",
              "name": "Set Kritiker Usage"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "3c082321-9d9e-4a86-aa73-0302eaf4dc4e",
                      "name": "usage.total_tokens",
                      "value": "={{ $json.usage.total_tokens }}",
                      "type": "number"
                    },
                    {
                      "id": "8adae7db-bc96-41b5-9694-97e74b70a766",
                      "name": "model",
                      "value": "={{ $json.model }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                1728,
                -928
              ],
              "id": "7d6ee609-a057-420d-b33c-6a363f95611f",
              "name": "Set Domare Usage"
            },
            {
              "parameters": {
                "jsCode": "/******************************\n * Token & Kostnad-summering\n * Körs direkt efter Merge (Append)\n * Förväntad Merge-item-struktur per rad (så tolerant som möjligt):\n * {\n *   model: \"gpt-4.1-mini\"            // eller options.model\n *   usage: {\n *     input_tokens?: number,\n *     output_tokens?: number,\n *     total_tokens?: number\n *   }\n *   // ...alternativt tokenUsage.promptTokens/completionTokens/totalTokens\n * }\n ******************************/\n\n// === KONFIG ===\n\n// Prislista: USD per 1000 tokens (prompt = \"in\", completion = \"out\")\nconst PRICING = {\n  \"gpt-4.1-mini-2025-04-14\": { in: 0.00040, out: 0.00160 },\n  // lägg till fler om du använder dem:\n  // \"gpt-4o\": { in: 0.00250, out: 0.01000 },\n};\n\n// Om bara total_tokens finns: antag hur de fördelas mellan input/output\nconst FALLBACK_INPUT_SHARE  = 0.40; // 40% in\nconst FALLBACK_OUTPUT_SHARE = 0.60; // 60% out\n\n// Valutakonvertering (om du vill visa SEK också)\nconst SHOW_SEK = true;\nconst USD_TO_SEK = 10.50;  // ändra till din kurs vid behov\n\n\n// === HJÄLPARE ===\nfunction toNum(x, def = 0) {\n  const n = Number(x);\n  return Number.isFinite(n) ? n : def;\n}\n\nfunction extractModel(j) {\n  return j?.model || j?.options?.model || j?.provider?.model || \"unknown-model\";\n}\n\nfunction extractUsage(j) {\n  // Försök flera fält-upplägg\n  const u = j?.usage || j?.tokenUsage || {};\n  let iTok  = toNum(u.input_tokens ?? u.promptTokens);\n  let oTok  = toNum(u.output_tokens ?? u.completionTokens);\n  let tTok  = toNum(u.total_tokens ?? u.totalTokens);\n\n  if ((iTok + oTok) === 0 && tTok > 0) {\n    // Ingen uppdelning, bara total → dela enligt fallback\n    iTok = Math.round(tTok * FALLBACK_INPUT_SHARE);\n    oTok = tTok - iTok;\n  } else if (tTok === 0) {\n    tTok = iTok + oTok;\n  }\n\n  return { in: iTok, out: oTok, total: tTok };\n}\n\nfunction costUSD(model, inTok, outTok) {\n  const p = PRICING[model] || { in: 0, out: 0 };\n  return (inTok / 1000) * (p.in || 0) + (outTok / 1000) * (p.out || 0);\n}\n\n\n// === LOGIK ===\nconst byModel = {};\nlet grand = { in: 0, out: 0, total: 0, costUSD: 0 };\n\nfor (const it of items) {\n  const j = it.json || {};\n  const model = extractModel(j);\n  const u = extractUsage(j);\n\n  if (!byModel[model]) byModel[model] = { in: 0, out: 0, total: 0, costUSD: 0 };\n\n  byModel[model].in    += u.in;\n  byModel[model].out   += u.out;\n  byModel[model].total += u.total;\n\n  const c = costUSD(model, u.in, u.out);\n  byModel[model].costUSD += c;\n\n  grand.in    += u.in;\n  grand.out   += u.out;\n  grand.total += u.total;\n  grand.costUSD += c;\n}\n\n\n// === RAPPORT (Markdown för Telegram) ===\nconst lines = [];\nlines.push(\"🧮 *Token & kostnad – ChatGPT-noder*\");\n\nfor (const [model, m] of Object.entries(byModel)) {\n  const line =\n    `• *${model}*\\n` +\n    `  – Input: ${m.in}  | Output: ${m.out}  | Total: ${m.total}\\n` +\n    `  – Kostnad: $${m.costUSD.toFixed(4)}` +\n    (SHOW_SEK ? `  (≈ ${ (m.costUSD * USD_TO_SEK).toFixed(2) } kr)` : ``);\n  lines.push(line);\n}\n\nlines.push(\"—\");\nlines.push(\n  `*Totalt*  Input: ${grand.in}  | Output: ${grand.out}  | Total: ${grand.total}\\n` +\n  `*Total kostnad:* $${grand.costUSD.toFixed(4)}` +\n  (SHOW_SEK ? `  (≈ ${ (grand.costUSD * USD_TO_SEK).toFixed(2) } kr)` : ``)\n);\n\n// Returnera EN rad för Telegram\nreturn [{\n  json: {\n    perModel: byModel,\n    totals: { ...grand, costSEK: SHOW_SEK ? grand.costUSD * USD_TO_SEK : undefined },\n    report: lines.join(\"\\n\")\n  }\n}];\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                2176,
                -928
              ],
              "id": "c19cee80-5be2-4dec-a2ef-4a76055abde5",
              "name": "Code"
            },
            {
              "parameters": {
                "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}\n",
                "text": "={{ $json.report }}",
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.telegram",
              "typeVersion": 1.2,
              "position": [
                2400,
                -928
              ],
              "id": "3cb34633-e0a9-47fe-9ba2-af949cab2170",
              "name": "Send a text message1",
              "webhookId": "11b6f238-9d1f-45de-bebf-3aa1a88221bb",
              "credentials": {
                "telegramApi": {
                  "id": "QgfPoF1VO69RunyN",
                  "name": "Telegram account 2"
                }
              }
            }
          ],
          "connections": {
            "Telegram Trigger": {
              "main": [
                [
                  {
                    "node": "Switch",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Switch": {
              "main": [
                [
                  {
                    "node": "Rensa fråga",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Rensa fråga": {
              "main": [
                [
                  {
                    "node": "Idéspruta",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Clean Up Crew": {
              "main": [
                [
                  {
                    "node": "Send a text message",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "TokenMerge": {
              "main": [
                [
                  {
                    "node": "Code",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Set Idéspruta Usage": {
              "main": [
                [
                  {
                    "node": "TokenMerge",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Idéspruta": {
              "main": [
                [
                  {
                    "node": "Set Idéspruta Usage",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Kritiker",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Domare",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Domare": {
              "main": [
                [
                  {
                    "node": "Set Domare Usage",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Clean Up Crew",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Kritiker": {
              "main": [
                [
                  {
                    "node": "Set Kritiker Usage",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Domare",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Set Kritiker Usage": {
              "main": [
                [
                  {
                    "node": "TokenMerge",
                    "type": "main",
                    "index": 1
                  }
                ]
              ]
            },
            "Set Domare Usage": {
              "main": [
                [
                  {
                    "node": "TokenMerge",
                    "type": "main",
                    "index": 2
                  }
                ]
              ]
            },
            "Send a text message": {
              "main": [
                []
              ]
            },
            "Code": {
              "main": [
                [
                  {
                    "node": "Send a text message1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1",
            "callerPolicy": "workflowsFromSameOwner"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "c3482e33-729b-44d5-a6e1-54f3d0412460",
          "triggerCount": 1,
          "shared": [
            {
              "createdAt": "2025-09-19T11:41:22.097Z",
              "updatedAt": "2025-09-19T11:41:22.097Z",
              "role": "workflow:owner",
              "workflowId": "lyGGAm2OqaFELFac",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-09-23T17:00:38.700Z",
          "updatedAt": "2025-09-23T19:25:50.000Z",
          "id": "n2JnwLiJW8e2TvDi",
          "name": "GoogleTest",
          "active": false,
          "isArchived": true,
          "nodes": [
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                0,
                32
              ],
              "id": "fba92bdc-e701-4afb-852e-fbaf1c15084d",
              "name": "When clicking ‘Execute workflow’"
            },
            {
              "parameters": {
                "sendTo": "joel.lundgren@osteraker.se",
                "subject": "Testar",
                "message": "Din lilla mamma",
                "options": {}
              },
              "type": "n8n-nodes-base.gmail",
              "typeVersion": 2.1,
              "position": [
                208,
                32
              ],
              "id": "c7b36669-a68f-4d26-9443-1994ebbe86f3",
              "name": "Send a message",
              "webhookId": "bad1ec07-8d25-408f-8d0a-ef23a593d38a",
              "credentials": {
                "gmailOAuth2": {
                  "id": "2jDmTCI5amWYPXRa",
                  "name": "Gmail account 2"
                }
              }
            }
          ],
          "connections": {
            "When clicking ‘Execute workflow’": {
              "main": [
                [
                  {
                    "node": "Send a message",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "1cc2de29-5ce2-4b0c-998f-9ac2688d2376",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-09-23T17:00:38.741Z",
              "updatedAt": "2025-09-23T17:00:38.741Z",
              "role": "workflow:owner",
              "workflowId": "n2JnwLiJW8e2TvDi",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-30T13:40:40.007Z",
          "updatedAt": "2025-09-19T22:45:30.000Z",
          "id": "o4OytxuO5rvGxIIe",
          "name": "Joke agent (with HTTP tool)",
          "active": false,
          "isArchived": true,
          "nodes": [
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.chatTrigger",
              "typeVersion": 1.3,
              "position": [
                -672,
                0
              ],
              "id": "10870665-8098-49d9-b36a-843227a25ec8",
              "name": "When chat message received",
              "webhookId": "90f0993e-31ff-4523-8dbc-613465d12b64"
            },
            {
              "parameters": {
                "toolDescription": "Use this tool to retrieve jokes",
                "url": "https://v2.jokeapi.dev/joke/",
                "sendQuery": true,
                "queryParameters": {
                  "parameters": [
                    {
                      "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Name', ``, 'string') }}",
                      "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequestTool",
              "typeVersion": 4.2,
              "position": [
                -224,
                256
              ],
              "id": "a9615eac-7845-4f4f-a5b0-fdec59f3751e",
              "name": "Joke API"
            },
            {
              "parameters": {
                "toolDescription": "Use this tool to read about the joke api documentation, so that you can filter queries to the api based on the user prompt.",
                "url": "https://v2.jokeapi.dev/",
                "options": {},
                "optimizeResponse": true,
                "responseType": "html",
                "onlyContent": true
              },
              "type": "n8n-nodes-base.httpRequestTool",
              "typeVersion": 4.2,
              "position": [
                -48,
                256
              ],
              "id": "a8f4b23a-89cb-4673-a595-6855ba1a6d10",
              "name": "API docs"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4.1-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                -576,
                272
              ],
              "id": "93fdc1ff-4dee-4f7f-8b37-b8c041a22073",
              "name": "Model",
              "credentials": {
                "openAiApi": {
                  "id": "qlVANgHQVRewZMT0",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {},
              "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
              "typeVersion": 1.3,
              "position": [
                -400,
                272
              ],
              "id": "8ca3ae47-7e3d-42ed-ac35-bf2f187715eb",
              "name": "Memory"
            },
            {
              "parameters": {
                "options": {
                  "systemMessage": "# Joke Agent System Prompt\n\nYou are a fun and entertaining joke bot that brings laughter and good vibes to conversations. Your job is to tell jokes, share humor, and keep things light and cheerful.\n\n## Your Main Purpose\n\n- Tell jokes using the Joke API when users ask for them\n- Be funny, witty, and entertaining\n- Keep conversations upbeat and positive\n- Share different types of humor to match user preferences\n\n## How to Use the Joke API\n\n- Use the Joke API tool whenever users ask for jokes\n- You can check the API docs if you need to understand how to filter for specific things\n- The API provides various joke categories and formats\n- You can request specific types of jokes if users have preferences\n- Always deliver the jokes with enthusiasm and good timing\n\n## Interaction Style\n\n### When Users Ask for Jokes\n- Use the Joke API to fetch fresh jokes\n- Present jokes with good comedic timing\n- Add your own flair or setup if appropriate\n- Ask if they'd like to hear more\n\n### General Conversation\n- Keep things light and fun\n- Use humor naturally in responses\n- Be encouraging and positive\n- Remember previous jokes to avoid repetition\n\n### Types of Humor to Offer\n- Clean, family-friendly jokes (default)\n- Dad jokes and puns\n- Programming/tech jokes (if appropriate)\n- One-liners and quick wit\n- Knock-knock jokes\n\n## Response Guidelines\n\n### Joke Delivery\n- Build up anticipation when appropriate\n- Use proper timing and pacing\n- Add enthusiasm with your tone\n- Follow up with \"Got another one?\" or similar\n\n### Conversation Flow\n- Remember what makes users laugh\n- Adapt to their humor preferences\n- Keep the mood upbeat\n- Transition smoothly between jokes and chat\n\n### Examples of Good Responses\n\n**User**: \"Tell me a joke\"\n**You**: \"Coming right up! Let me grab a good one for you...\" *[uses Joke API]* \n\n**User**: \"That was terrible!\"\n**You**: \"Hey, they can't all be winners! 😄 Want me to try again with a different style?\"\n\n**User**: \"Got any programming jokes?\"\n**You**: \"Oh, I love tech humor! Let me find you a good one...\" *[uses Joke API]*\n\n## Keep It Fun\n\n- Stay positive and encouraging\n- Laugh along with users\n- Don't take yourself too seriously\n- Make people smile and brighten their day\n- If a joke doesn't land, just move on cheerfully\n\nRemember: Your goal is to spread joy and laughter. Keep things fun, appropriate, and entertaining!"
                }
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.2,
              "position": [
                -448,
                0
              ],
              "id": "fb541fe9-749d-4f22-a171-3a16eb1bdb4c",
              "name": "Joke agent"
            },
            {
              "parameters": {
                "content": "### Joke Agent\nA chat-based joke agent that uses the Joke API and an AI model to deliver fun, personalized jokes and keep conversations entertaining.\n\n#### Set up\n- Configure your credentials in the Model node\n- Open the chat and start talking to your agent\n\n#### Next steps\nYou can apply this pattern to any website or API, try connecting the docs of a tool you use regularly but remember to change the system prompt.\n",
                "height": 400,
                "width": 304,
                "color": 5
              },
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -1088,
                -32
              ],
              "typeVersion": 1,
              "id": "fd4fc7ea-30bf-42d1-8bb6-4026ef12e95c",
              "name": "Sticky Note"
            }
          ],
          "connections": {
            "When chat message received": {
              "main": [
                [
                  {
                    "node": "Joke agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Joke API": {
              "ai_tool": [
                [
                  {
                    "node": "Joke agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "API docs": {
              "ai_tool": [
                [
                  {
                    "node": "Joke agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "Joke agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "Memory": {
              "ai_memory": [
                [
                  {
                    "node": "Joke agent",
                    "type": "ai_memory",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateId": "joke_agent_with_http_tool",
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "23a86ef3-d768-4bb6-aec0-f75cc1fa94ce",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-08-30T13:40:40.016Z",
              "updatedAt": "2025-08-30T13:40:40.016Z",
              "role": "workflow:owner",
              "workflowId": "o4OytxuO5rvGxIIe",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-10-07T20:59:36.361Z",
          "updatedAt": "2025-10-07T21:28:47.000Z",
          "id": "oLZcbn0njy035Xo0",
          "name": "My workflow 5",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.chatTrigger",
              "typeVersion": 1.3,
              "position": [
                -256,
                -112
              ],
              "id": "1d66243d-8a57-47c6-90f9-5dbdba79d29c",
              "name": "When chat message received",
              "webhookId": "7b0f3ba6-1afa-4627-8597-7dc0b1ca1fc6"
            },
            {
              "parameters": {
                "resource": "image",
                "prompt": "={{ $json.chatInput }}",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.openAi",
              "typeVersion": 1.8,
              "position": [
                -32,
                -32
              ],
              "id": "b88004b1-4ce2-497a-945c-515d89cd2909",
              "name": "Generate an image",
              "credentials": {
                "openAiApi": {
                  "id": "qlVANgHQVRewZMT0",
                  "name": "OpenAi account"
                }
              }
            }
          ],
          "connections": {
            "When chat message received": {
              "main": [
                [
                  {
                    "node": "Generate an image",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "1458a1c2-d581-4ea0-9d3d-308cf43e8d41",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-10-07T20:59:36.480Z",
              "updatedAt": "2025-10-07T20:59:36.480Z",
              "role": "workflow:owner",
              "workflowId": "oLZcbn0njy035Xo0",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-29T18:44:51.167Z",
          "updatedAt": "2025-08-29T22:35:47.000Z",
          "id": "qM8jSQzj4fxhyr9j",
          "name": "Telegram",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "updates": [
                  "message"
                ],
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.telegramTrigger",
              "typeVersion": 1.2,
              "position": [
                0,
                0
              ],
              "id": "ea65e2fc-e544-465a-9993-1c03110de25a",
              "name": "Telegram Trigger",
              "webhookId": "362a73f1-4b61-435b-a9a1-b7d4e2fb604f",
              "credentials": {
                "telegramApi": {
                  "id": "7NKBIMQRWzjXDg0e",
                  "name": "Telegram account"
                }
              }
            },
            {
              "parameters": {
                "chatId": "={{$json[\"message\"][\"chat\"][\"id\"]}}",
                "text": "=Du skrev: {{$json[\"message\"][\"text\"]}}",
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.telegram",
              "typeVersion": 1.2,
              "position": [
                928,
                160
              ],
              "id": "ab3a4e66-cd0f-4882-a599-2310f48e6884",
              "name": "Send a text message",
              "webhookId": "ad80a581-2efc-4439-b308-38b7fc600e4d",
              "credentials": {
                "telegramApi": {
                  "id": "7NKBIMQRWzjXDg0e",
                  "name": "Telegram account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "d9a7c20a-a42b-4e28-b809-8d45cce1fd52",
                      "leftValue": "={{$json[\"message\"][\"text\"].startsWith(\"!kör\")}}",
                      "rightValue": "",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                496,
                -48
              ],
              "id": "6e5aa2e1-e8d9-4148-abe3-2e07ead01cb3",
              "name": "If"
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                496,
                320
              ],
              "id": "dd87750c-a189-47b7-929b-2805ed9ebbc4",
              "name": "STOP"
            }
          ],
          "connections": {
            "Telegram Trigger": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Send a text message",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "STOP",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "STOP": {
              "main": [
                []
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "f4bf0669-839f-4ecc-b107-6ac6b92fa73b",
          "triggerCount": 1,
          "shared": [
            {
              "createdAt": "2025-08-29T18:44:51.180Z",
              "updatedAt": "2025-08-29T18:44:51.180Z",
              "role": "workflow:owner",
              "workflowId": "qM8jSQzj4fxhyr9j",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-10-06T17:57:15.099Z",
          "updatedAt": "2025-10-06T19:30:35.000Z",
          "id": "u3dQkMDB1qJwRkYW",
          "name": "Gemini test",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                0,
                0
              ],
              "id": "5c029d4a-efa2-4087-be57-0a484838a02b",
              "name": "When clicking ‘Execute workflow’"
            },
            {
              "parameters": {
                "modelId": {
                  "__rl": true,
                  "value": "models/gemini-2.0-flash",
                  "mode": "list",
                  "cachedResultName": "models/gemini-2.0-flash"
                },
                "messages": {
                  "values": [
                    {}
                  ]
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.googleGemini",
              "typeVersion": 1,
              "position": [
                208,
                0
              ],
              "id": "629c60dd-1fd0-4d32-a871-cb2abe51592f",
              "name": "Message a model",
              "credentials": {
                "googlePalmApi": {
                  "id": "k3VTKRZhisV3UVaL",
                  "name": "Google Gemini(PaLM) Api account 2"
                }
              }
            }
          ],
          "connections": {
            "When clicking ‘Execute workflow’": {
              "main": [
                [
                  {
                    "node": "Message a model",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "8b445f75-c848-4c25-80df-676c8daf982a",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-10-06T17:57:15.109Z",
              "updatedAt": "2025-10-06T17:57:15.109Z",
              "role": "workflow:owner",
              "workflowId": "u3dQkMDB1qJwRkYW",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-09-01T18:18:36.836Z",
          "updatedAt": "2025-09-19T22:45:36.000Z",
          "id": "vbkh4X46EnL7bgNf",
          "name": "RSS",
          "active": false,
          "isArchived": true,
          "nodes": [
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "field": "minutes",
                      "minutesInterval": 60
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                0,
                0
              ],
              "id": "ebb60901-fe3c-41da-ad8a-4de682faca9c",
              "name": "Schedule Trigger"
            },
            {
              "parameters": {
                "url": "https://rss.torrentleech.org/f30e42b6acd7431578ce",
                "options": {}
              },
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1.2,
              "position": [
                208,
                0
              ],
              "id": "5966cc7d-c1db-4b18-87ca-a0f2ba0175a6",
              "name": "RSS Read"
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"id\": \"=https://www.torrentleech.org/torrent/241592991\",\n  \"title\": \"=MLB 2025 08 31 Seattle Mariners vs Cleveland Guardians 1080p WEB h264-NiGHTNiNJAS\",\n  \"link\": \"=https://www.torrentleech.org/rss/download/241592991/f30e42b6acd7431578ce/MLB.2025.08.31.Seattle.Mariners.vs.Cleveland.Guardians.1080p.WEB.h264-NiGHTNiNJAS.torrent\",\n  \"pubDate\": \"=2025-09-01T18:14:58.000Z\",\n  \"categories\": \"=Episodes HD\",\n  \"description\": \"=Category: Episodes HD - Seeders: 0 - Leechers: 5\"\n}\n",
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                416,
                0
              ],
              "id": "8317b28e-f2a8-4496-b765-252fc2537228",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "jsCode": "// ---- Inställningar ----\nconst MAX_HOURS = 24;                // släpp bara inlägg senaste 24h\nconst ALLOW_CATS = [\"WEBRip\",\"HDRip\"];               // t.ex. [\"WEBRip\",\"HDRip\"]; tom = tillåt alla\nconst BLOCK_CATS = [];               // t.ex. [\"CAM\"]; tom = blocka inga\n// ------------------------\n\nfunction withinHours(dateStr, hours) {\n  const d = new Date(dateStr || 0);\n  if (isNaN(d)) return false;\n  const diffMs = Date.now() - d.getTime();\n  return diffMs <= hours * 3600 * 1000;\n}\n\nfunction normalizeCats(cats) {\n  if (Array.isArray(cats)) return cats;\n  if (cats === null || cats === undefined) return [];\n  if (typeof cats === 'string') return [cats];\n  return [];\n}\n\nfunction hasAllowedCategory(cats) {\n  if (!ALLOW_CATS.length) return true;\n  const set = new Set(cats.map(c => String(c).toLowerCase()));\n  return ALLOW_CATS.some(c => set.has(c.toLowerCase()));\n}\n\nfunction hasBlockedCategory(cats) {\n  if (!BLOCK_CATS.length) return false;\n  const set = new Set(cats.map(c => String(c).toLowerCase()));\n  return BLOCK_CATS.some(c => set.has(c.toLowerCase()));\n}\n\nreturn items.filter(it => {\n  const dOk = withinHours(it.json.pubDate, MAX_HOURS);\n  const cats = normalizeCats(it.json.categories);\n  const cOk = hasAllowedCategory(cats) && !hasBlockedCategory(cats);\n  return dOk && cOk;\n});\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                624,
                0
              ],
              "id": "d7255130-0268-413e-a598-069c4c53cf67",
              "name": "Code"
            },
            {
              "parameters": {
                "jsCode": "// Persistens mellan körningar (liten key/value-låda i själva workflow:et)\nconst store = $getWorkflowStaticData('global');\nif (!store.sent) store.sent = {}; // { [id]: timestamp }\n\nconst fresh = [];\nfor (const it of items) {\n  const key = String(it.json.id || it.json.link || (it.json.title + '|' + it.json.pubDate) || '');\n  if (!key) continue;\n  if (!store.sent[key]) {\n    fresh.push(it);\n  }\n}\n\n// Returnera endast NYA poster\nreturn fresh;\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                832,
                0
              ],
              "id": "996f614b-166e-488f-ba7d-d2c391351df2",
              "name": "key/value"
            },
            {
              "parameters": {
                "jsCode": "function esc(s = '') {\n  return String(s)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n}\n\n// Om inga nya poster, returnera bara ett \"inga nya\"\nif (items.length === 0) {\n  return [{\n    json: {\n      html: '<p><em>Inga nya poster.</em></p>',\n      text: 'Inga nya poster.',\n      count: 0\n    }\n  }];\n}\n\n// Bygg HTML-tabell\nlet rows = items.map(it => {\n  const title = esc(it.json.title || '');\n  const date = esc(it.json.pubDate || '');\n  const cats = it.json.categories;\n  const catsArr = Array.isArray(cats) ? cats : (cats ? [cats] : []);\n  const catsStr = esc(catsArr.join(', '));\n  return `<tr><td>${title}</td><td>${catsStr}</td><td>${date}</td></tr>`;\n}).join('');\n\nconst html = `\n<h3>Senaste från RSS</h3>\n<table border=\"1\" cellpadding=\"6\" cellspacing=\"0\" style=\"border-collapse:collapse;\">\n  <thead><tr><th>Titel</th><th>Kategori</th><th>Datum</th></tr></thead>\n  <tbody>${rows}</tbody>\n</table>\n`;\n\n// Bygg textlista\nconst text = items.map((it, i) => {\n  const cats = it.json.categories;\n  const catsArr = Array.isArray(cats) ? cats : (cats ? [cats] : []);\n  return `${i + 1}. ${it.json.title || ''}  [${catsArr.join(', ')}]  ${it.json.pubDate || ''}`;\n}).join('\\n');\n\nreturn [{\n  json: {\n    html,\n    text,\n    count: items.length\n  }\n}];\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1040,
                0
              ],
              "id": "954761dd-2743-4254-bd2f-e5a89608db6f",
              "name": "HTML & text"
            }
          ],
          "connections": {
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "RSS Read",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "RSS Read": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Code",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code": {
              "main": [
                [
                  {
                    "node": "key/value",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "key/value": {
              "main": [
                [
                  {
                    "node": "HTML & text",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "HTML & text": {
              "main": [
                []
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "c9494b7c-5014-4941-ab85-26499f3da5d2",
          "triggerCount": 0,
          "shared": [
            {
              "createdAt": "2025-09-01T18:18:36.873Z",
              "updatedAt": "2025-09-01T18:18:36.873Z",
              "role": "workflow:owner",
              "workflowId": "vbkh4X46EnL7bgNf",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-10-06T20:44:59.310Z",
          "updatedAt": "2025-10-06T21:46:18.000Z",
          "id": "wElzkfaeCenkrqEK",
          "name": "Nyhetssamlare v2",
          "active": false,
          "isArchived": true,
          "nodes": [
            {
              "parameters": {
                "url": "https://rss.aftonbladet.se/rss2/small/pages/sections/senastenytt/",
                "options": {}
              },
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1.2,
              "position": [
                336,
                -448
              ],
              "id": "76bc8af6-9e23-4f9e-b8e9-9d63ebdc2559",
              "name": "Aftonbladet RSS"
            },
            {
              "parameters": {
                "url": "https://feeds.expressen.se/nyheter/",
                "options": {}
              },
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1.2,
              "position": [
                336,
                -256
              ],
              "id": "c12ed068-332c-475c-908e-c15c6e235789",
              "name": "Expressen RSS"
            },
            {
              "parameters": {
                "maxItems": 10
              },
              "type": "n8n-nodes-base.limit",
              "typeVersion": 1,
              "position": [
                560,
                -448
              ],
              "id": "0db6544c-af8d-441a-8548-ef57a2565ea9",
              "name": "Limit"
            },
            {
              "parameters": {
                "maxItems": 10
              },
              "type": "n8n-nodes-base.limit",
              "typeVersion": 1,
              "position": [
                560,
                -256
              ],
              "id": "e3eacca4-4107-44f1-b8f5-89ae6bb4d5fb",
              "name": "Limit1"
            },
            {
              "parameters": {
                "maxItems": 10
              },
              "type": "n8n-nodes-base.limit",
              "typeVersion": 1,
              "position": [
                560,
                -64
              ],
              "id": "68955d3d-a47b-40df-957f-366892f65bf1",
              "name": "Limit2"
            },
            {
              "parameters": {
                "url": "https://techcrunch.com/feed/",
                "options": {}
              },
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1.2,
              "position": [
                336,
                -64
              ],
              "id": "b20cb58f-70ec-4b0c-95de-4580558d0f0d",
              "name": "TechCrunch RSS"
            },
            {
              "parameters": {
                "jsCode": "const items = $input.all();\n\nfunction stripHTML(str) {\n  return str ? str.replace(/<[^>]*>?/gm, '').trim() : '';\n}\n\nfunction parseDate(d) {\n  const date = new Date(d);\n  return isNaN(date.getTime()) ? 0 : date.getTime();\n}\n\nfunction formatDate(d) {\n  try {\n    return new Date(d).toLocaleDateString('sv-SE', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric',\n    });\n  } catch {\n    return '';\n  }\n}\n\n// 1️⃣ sortera nyaste först\nitems.sort(\n  (a, b) =>\n    parseDate(b.json.isoDate || b.json.pubDate) -\n    parseDate(a.json.isoDate || a.json.pubDate)\n);\n\n// 2️⃣ skapa klickbara rader med datum och källa\nconst lines = items.map((i) => {\n  const j = i.json;\n  const title = stripHTML(j.title || 'Ingen titel');\n  const url = j.link || j.url || '';\n  const source =\n    j.feedTitle ||\n    j['dc:creator'] ||\n    j.source ||\n    (j.link ? new URL(j.link).hostname.replace('www.', '') : 'Okänd källa');\n  const date = formatDate(j.isoDate || j.pubDate || j.published || new Date());\n  return `• [${title}](${url}) — ${source} · ${date}`;\n});\n\n// 3️⃣ slå ihop allt till ett meddelande\nconst message = `🗞️ **TechCrunch**\\n` + lines.join('\\n');\n\nreturn [{ json: { content: message } }];"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                784,
                -64
              ],
              "id": "2f7ac7d2-b136-4721-a1f8-ac8d09d8c292",
              "name": "Code"
            },
            {
              "parameters": {
                "authentication": "webhook",
                "content": "=**Expressen**",
                "options": {},
                "embeds": {
                  "values": [
                    {
                      "description": "={{ $json.content }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.discord",
              "typeVersion": 2,
              "position": [
                1008,
                -256
              ],
              "id": "9d956f60-9ab1-4117-a8de-b717d1e2cf35",
              "name": "Discord",
              "webhookId": "b487c1de-7195-4c6b-bd0f-2300895ce862",
              "credentials": {
                "discordWebhookApi": {
                  "id": "Pn7a74tA19SOGk9R",
                  "name": "Discord Webhook account 2"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const items = $input.all();\n\nfunction stripHTML(str) {\n  return str ? str.replace(/<[^>]*>?/gm, '').trim() : '';\n}\n\nfunction parseDate(d) {\n  const date = new Date(d);\n  return isNaN(date.getTime()) ? 0 : date.getTime();\n}\n\nfunction formatDate(d) {\n  try {\n    return new Date(d).toLocaleDateString('sv-SE', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric',\n    });\n  } catch {\n    return '';\n  }\n}\n\nfunction getHostname(url) {\n  if (!url || typeof url !== 'string') return 'Okänd källa';\n  const match = url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n  return match ? match[1] : 'Okänd källa';\n}\n\n// 1️⃣ sortera nyaste först\nitems.sort(\n  (a, b) =>\n    parseDate(b.json.isoDate || b.json.pubDate) -\n    parseDate(a.json.isoDate || a.json.pubDate)\n);\n\n// 2️⃣ skapa klickbara rader med datum och källa\nconst lines = items.map((i) => {\n  const j = i.json;\n  const title = stripHTML(j.title || 'Ingen titel');\n  const url = j.link || j.url || '';\n  const source =\n    j.feedTitle ||\n    j['dc:creator'] ||\n    j.source ||\n    getHostname(j.link);\n  const date = formatDate(j.isoDate || j.pubDate || j.published || new Date());\n  return `• [${title}](${url}) — ${source} · ${date}`;\n});\n\n// 3️⃣ slå ihop allt till ett meddelande\nconst message = `🗞️ **Expressen**\\n` + lines.join('\\n');\n\nreturn [{ json: { content: message } }];"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                784,
                -256
              ],
              "id": "69433bc5-fb4a-469c-98e8-440364faf548",
              "name": "Code1"
            },
            {
              "parameters": {
                "authentication": "webhook",
                "content": "=",
                "options": {},
                "embeds": {
                  "values": [
                    {
                      "description": "={{ $json.content }}"
                    }
                  ]
                }
              },
              "type": "n8n-nodes-base.discord",
              "typeVersion": 2,
              "position": [
                1008,
                -64
              ],
              "id": "271eb091-d8cd-4151-8bf5-10074fd35dd7",
              "name": "Discord1",
              "webhookId": "6cb4495d-3706-491a-903a-f56faf4c0569",
              "credentials": {
                "discordWebhookApi": {
                  "id": "Pn7a74tA19SOGk9R",
                  "name": "Discord Webhook account 2"
                }
              }
            },
            {
              "parameters": {
                "authentication": "webhook",
                "content": "={{$json[\"content\"]}}",
                "options": {}
              },
              "type": "n8n-nodes-base.discord",
              "typeVersion": 2,
              "position": [
                464,
                -992
              ],
              "id": "11c93011-aeed-4b75-b53e-1dc0da5eb949",
              "name": "Discord2",
              "webhookId": "fda2ad11-c5dc-439a-a491-5320785a1530",
              "credentials": {
                "discordWebhookApi": {
                  "id": "Pn7a74tA19SOGk9R",
                  "name": "Discord Webhook account 2"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "const items = $input.all();\n\n/**\n * === KONFIGURATION ===\n * Lägg till fler om du har olika format\n */\nconst config = {\n  titleFields: ['title', 'headline', 'item_title'],\n  urlFields: ['link', 'url', 'guid'],\n  dateFields: ['isoDate', 'pubDate', 'published', 'date'],\n  sourceFields: ['feedTitle', 'source', 'author', 'creator']\n};\n\n/**\n * === Hjälpfunktioner ===\n */\nfunction firstAvailable(obj, keys) {\n  for (const key of keys) {\n    if (obj[key]) return obj[key];\n  }\n  return null;\n}\n\nfunction stripHTML(str) {\n  return str ? str.replace(/<[^>]*>?/gm, '').trim() : '';\n}\n\nfunction parseDate(d) {\n  const date = new Date(d);\n  return isNaN(date.getTime()) ? 0 : date.getTime();\n}\n\nfunction formatDate(d) {\n  try {\n    return new Date(d).toLocaleDateString('sv-SE', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    });\n  } catch {\n    return '';\n  }\n}\n\nfunction getHostname(url) {\n  const match = url.match(/https?:\\/\\/([^/]+)/);\n  return match ? match[1].replace('www.', '') : 'Okänd källa';\n}\n\n/**\n * === Huvudlogik ===\n */\n\n// sortera nyaste först\nitems.sort((a, b) => {\n  const adate = firstAvailable(a.json, config.dateFields);\n  const bdate = firstAvailable(b.json, config.dateFields);\n  return parseDate(bdate) - parseDate(adate);\n});\n\n// begränsa till 10 nyaste\nconst latest = items.slice(0, 10);\n\n// bygg utdata\nconst lines = latest.map((i) => {\n  const j = i.json;\n  const title = stripHTML(firstAvailable(j, config.titleFields) || 'Ingen titel');\n  const url = firstAvailable(j, config.urlFields) || '';\n  const source =\n    firstAvailable(j, config.sourceFields) || getHostname(url);\n  const date = formatDate(firstAvailable(j, config.dateFields) || new Date());\n  return `• [${title}](${url}) — ${source} · ${date}`;\n});\n\n// slå ihop till Discord-meddelande\nconst message = `🗞️ **Aftonbladet**\\n` + lines.join('\\n');\n\nreturn [{ json: { content: message } }];\n"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                784,
                -448
              ],
              "id": "de5437cc-b2b8-4573-8ff4-e3910eb473b8",
              "name": "Code2"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "d9a7c20a-a42b-4e28-b809-8d45cce1fd52",
                      "leftValue": "={{$json[\"message\"][\"text\"].startsWith(\"nyheter\")}}",
                      "rightValue": "",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -1008,
                -480
              ],
              "id": "5297c7d4-e488-4be6-bef6-f43c9ce9da5f",
              "name": "If"
            },
            {
              "parameters": {
                "url": "={{$json[\"url\"]}}",
                "options": {
                  "response": {
                    "response": {
                      "responseFormat": "text"
                    }
                  }
                }
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -336,
                -992
              ],
              "id": "e5f8bb2f-c5aa-4145-a445-b5cdbef8bb9e",
              "name": "HTTP Request"
            },
            {
              "parameters": {
                "jsCode": "return [\n  { json: { name: \"Aftonbladet\", url: \"https://rss.aftonbladet.se/rss2/small/pages/sections/nyheter/\" }},\n  { json: { name: \"Expressen\", url: \"https://feeds.expressen.se/nyheter/\" }},\n  { json: { name: \"TechCrunch\", url: \"https://techcrunch.com/feed/\" }},\n];"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                -544,
                -880
              ],
              "id": "8df0bdcb-32c0-489e-9fda-01ff9e2388c5",
              "name": "RSS FEEDS"
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -752,
                -992
              ],
              "id": "655d6f94-c056-4794-90ca-90479d38ab90",
              "name": "When clicking ‘Execute workflow’"
            },
            {
              "parameters": {
                "dataPropertyName": "=data",
                "options": {}
              },
              "type": "n8n-nodes-base.xml",
              "typeVersion": 1,
              "position": [
                -128,
                -992
              ],
              "id": "9c0e89e4-a274-4c26-95ee-0ad8fd279139",
              "name": "XML"
            },
            {
              "parameters": {
                "jsCode": "const items = $input.all();\n\nfunction formatDate(d) {\n  return new Date(d).toLocaleDateString('sv-SE', {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  });\n}\n\n// Skapa en rubrik\nconst header = `🗞️ **${items[0].json.feedTitle || 'Nyheter'}**`;\n\n// Gör en lista med klickbara länkar\nconst lines = items.map(i => {\n  const j = i.json;\n  const title = j.title?.replace(/<[^>]*>/g, '') || 'Ingen titel';\n  const link = j.link || '';\n  const date = j.pubDate ? formatDate(j.pubDate) : '';\n  return `• [${title}](${link}) · ${date}`;\n});\n\nconst message = [header, ...lines].join('\\n');\n\nreturn [{ json: { content: message } }];"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                288,
                -992
              ],
              "id": "1d988594-827c-41f2-99b9-19b8ed787187",
              "name": "Code in JavaScript"
            },
            {
              "parameters": {
                "jsCode": "const feed = $json.rss.channel;\n\n// säkerställ att vi har en lista\nconst items = Array.isArray(feed.item) ? feed.item : [feed.item];\n\n// returnera varje artikel som ett eget item\nreturn items.map(i => ({\n  json: {\n    title: i.title,\n    link: i.link,\n    pubDate: i.pubDate,\n    feedTitle: feed.title || 'Nyheter'\n  }\n}));"
              },
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                80,
                -992
              ],
              "id": "6dc2c11a-7646-4b2f-ac12-df170a19bf42",
              "name": "xtract items"
            }
          ],
          "connections": {
            "Aftonbladet RSS": {
              "main": [
                [
                  {
                    "node": "Limit",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Expressen RSS": {
              "main": [
                [
                  {
                    "node": "Limit1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Limit": {
              "main": [
                [
                  {
                    "node": "Code2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Limit1": {
              "main": [
                [
                  {
                    "node": "Code1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "TechCrunch RSS": {
              "main": [
                [
                  {
                    "node": "Limit2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Limit2": {
              "main": [
                [
                  {
                    "node": "Code",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code": {
              "main": [
                [
                  {
                    "node": "Discord1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code1": {
              "main": [
                [
                  {
                    "node": "Discord",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code2": {
              "main": [
                []
              ]
            },
            "If": {
              "main": [
                []
              ]
            },
            "RSS FEEDS": {
              "main": [
                [
                  {
                    "node": "HTTP Request",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking ‘Execute workflow’": {
              "main": [
                [
                  {
                    "node": "RSS FEEDS",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "HTTP Request": {
              "main": [
                [
                  {
                    "node": "XML",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "XML": {
              "main": [
                [
                  {
                    "node": "xtract items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Code in JavaScript": {
              "main": [
                [
                  {
                    "node": "Discord2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "xtract items": {
              "main": [
                [
                  {
                    "node": "Code in JavaScript",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "a45e54c1-911f-41f8-ae4b-6b535ec3c502",
          "triggerCount": 1,
          "shared": [
            {
              "createdAt": "2025-10-06T20:44:59.317Z",
              "updatedAt": "2025-10-06T20:44:59.317Z",
              "role": "workflow:owner",
              "workflowId": "wElzkfaeCenkrqEK",
              "projectId": "ZOaOlv2Mz7C5Yg5V"
            }
          ],
          "tags": []
        }
      }
    ],
    "Schedule Trigger": [
      {
        "json": {
          "timestamp": "2025-10-10T12:39:19.965+02:00",
          "Readable date": "October 10th 2025, 12:39:19 pm",
          "Readable time": "12:39:19 pm",
          "Day of week": "Friday",
          "Year": "2025",
          "Month": "October",
          "Day of month": "10",
          "Hour": "12",
          "Minute": "39",
          "Second": "19",
          "Timezone": "Europe/Stockholm (UTC+02:00)"
        }
      }
    ]
  },
  "versionId": "40cf058b-2095-4adf-9e24-4d00dc2423a1",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-10-09T20:19:49.435Z",
      "updatedAt": "2025-10-09T20:19:49.435Z",
      "role": "workflow:owner",
      "workflowId": "WGZmNNtndQU4JMfW",
      "projectId": "ZOaOlv2Mz7C5Yg5V"
    }
  ],
  "tags": []
}